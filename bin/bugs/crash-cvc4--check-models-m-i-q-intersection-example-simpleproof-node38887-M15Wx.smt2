(declare-fun v1 () Real)
(declare-fun A () Real)
(declare-fun I1uscore1dollarskuscore169 () Real)
(declare-fun B () Real)
(declare-fun v2 () Real)
(declare-fun I1 () Real)
(declare-fun ts172uscore0 () Real)
(declare-fun I2 () Real)
(declare-fun x2 () Real)
(declare-fun x1 () Real)
(declare-fun v2uscore1dollarskuscore169 () Real)
(declare-fun I2uscore1dollarskuscore169 () Real)
(declare-fun xI1 () Real)
(declare-fun V () Real)
(declare-fun xI2 () Real)
(declare-fun t172uscore0 () Real)
(declare-fun v1uscore1dollarskuscore169 () Real)
(declare-fun ep () Real)
(declare-fun x1uscore1dollarskuscore152 () Real)
(assert (not (exists ((ts172uscore0 Real)) (let ((?v_1 (* (* (- 1) B) ts172uscore0))) (let ((?v_0 (+ ?v_1 v1uscore1dollarskuscore169))(?v_2 (+ ?v_1 v2uscore1dollarskuscore169))) (=> (and (=> (=> (=> (=> (and (or (and (and (=> (=> (or (and (or (or (= I2uscore1dollarskuscore169 2) (distinct I1uscore1dollarskuscore169 1)) (> xI1 (+ (* x1uscore1dollarskuscore152 (/ (- v1uscore1dollarskuscore169 v1uscore1dollarskuscore169) (- 2 B))) (- (+ (/ A B) 1) (* (* (/ A 2) (* ep ep)) (- ep v1uscore1dollarskuscore169)))))) (distinct I1uscore1dollarskuscore169 2)) (distinct I1 2)) (<= xI1 x1)) (distinct I2 2)) (<= xI2 x2)) (>= B 0)) (< v1 0)) (<= v1 V)) (<= v2 0)) (<= v2 V)) (>= A 0)) (< V 0)) (<= ep 0)) (and (< t172uscore0 0) (=> (and (or (< 0 ts172uscore0) (< ts172uscore0 t172uscore0)) (=> (or (=> (=> (>= ?v_0 0) (> ?v_0 V)) (< ?v_2 0)) (< ?v_2 V)) (<= (* ts172uscore0 0) ep))) (or (= 2 2) (distinct 0 2))))))))))
(check-sat)
(exit)