(set-info :smt-lib-version 2.6)
(set-logic LRA)
(set-info :source |
   Monniaux, David; Quantifier Elimination by Lazy Model Enumeration, CAV 2010
|)
(set-info :category "random")
; ./Mjollnir_examples/B1/formula_106.m
(set-info :status sat)
(assert
 (forall ((|v9:0| Real) )(exists ((|v8:1| Real) )(forall ((|v7:2| Real) )(exists ((|v6:3| Real) )(forall ((|v5:4| Real) )(exists ((|v4:5| Real) )(forall ((|v3:6| Real) )(exists ((|v2:7| Real) )(forall ((|v1:8| Real) )(exists ((|v0:9| Real) )(let ((?x105 7))
(let ((?x165 (* ?x105 |v4:5|)))
(let (($x291 (<= (+ (+ (* 15 |v3:6|) (* 8 |v5:4|)) ?x165) 2)))
(let ((?x51 (- 20)))
(let ((?x281 (+ (+ (* (- 6) |v9:0|) (* (- 15) |v4:5|)) (* 9 |v1:8|))))
(let ((?x272 (+ (+ (* (- 10) |v8:1|) (* 18 |v8:1|)) (* 11 |v8:1|))))
(let ((?x101 20))
(let ((?x266 (+ (+ (* 16 |v6:3|) (* 19 |v0:9|)) (* (- 4) |v4:5|))))
(let ((?x92 (* (- 1) |v0:9|)))
(let (($x257 (<= (+ (+ (* (- 7) |v6:3|) (* 0 |v7:2|)) ?x92) (- 16))))
(let ((?x67 15))
(let (($x258 (and (<= (+ (+ (* ?x51 |v7:2|) (* 0 |v1:8|)) |v2:7|) ?x67) $x257)))
(let ((?x246 (+ (+ (* 18 |v6:3|) (* 16 |v9:0|)) (* (- 8) |v9:0|))))
(let ((?x203 (- 6)))
(let ((?x239 (+ (+ (* ?x51 |v9:0|) (* (- 3) |v4:5|)) (* 13 |v6:3|))))
(let (($x294 (or (and (and (<= ?x239 ?x203) (<= ?x246 (- 18))) $x258) (or (or (<= ?x266 ?x101) (<= ?x272 ?x51)) (or (<= ?x281 ?x51) $x291)))))
(let ((?x54 19))
(let ((?x231 (+ (+ (* (- 9) |v0:9|) (* 12 |v0:9|)) (* 9 |v0:9|))))
(let ((?x221 18))
(let ((?x218 16))
(let ((?x217 (+ (+ (* (- 11) |v2:7|) (* ?x54 |v6:3|)) (* (- 2) |v3:6|))))
(let (($x227 (and (<= ?x217 ?x218) (<= (+ (+ |v8:1| (* ?x221 |v0:9|)) (* ?x203 |v7:2|)) ?x221))))
(let ((?x208 (+ (+ (* 5 |v9:0|) (* ?x203 |v2:7|)) (* 5 |v8:1|))))
(let ((?x77 5))
(let ((?x199 (+ (+ (* 12 |v0:9|) (* (- 8) |v5:4|)) (* 0 |v0:9|))))
(let ((?x191 (+ (+ (* 6 |v2:7|) (* 0 |v1:8|)) (* 17 |v9:0|))))
(let ((?x114 (- 9)))
(let ((?x185 (+ (+ (* 10 |v9:0|) (* 3 |v3:6|)) (* (- 8) |v4:5|))))
(let (($x211 (or (and (<= ?x185 ?x114) (<= ?x191 (- 12))) (and (<= ?x199 ?x77) (<= ?x208 14)))))
(let ((?x120 12))
(let (($x169 (<= (+ (+ ?x165 (* (- 7) |v2:7|)) (* ?x105 |v5:4|)) (- 1))))
(let (($x176 (or $x169 (<= (+ (+ (* 0 |v2:7|) (* ?x105 |v5:4|)) |v7:2|) ?x120))))
(let ((?x162 (+ (+ (* (- 3) |v7:2|) (* 11 |v5:4|)) (* (- 7) |v5:4|))))
(let ((?x153 (* ?x105 |v5:4|)))
(let (($x155 (<= (+ (+ (* (- 2) |v1:8|) (* 3 |v1:8|)) ?x153) ?x54)))
(let ((?x17 (- 11)))
(let ((?x71 (- 2)))
(let ((?x140 (+ (+ (* 14 |v1:8|) (* (- 17) |v7:2|)) (* 10 |v4:5|))))
(let (($x148 (and (<= ?x140 ?x71) (<= (+ (+ (* ?x101 |v4:5|) (* ?x17 |v9:0|)) (* ?x51 |v7:2|)) ?x17))))
(let ((?x128 (+ (+ (* (- 10) |v5:4|) (* 17 |v5:4|)) (* (- 5) |v1:8|))))
(let ((?x118 (* 6 |v2:7|)))
(let (($x131 (or (<= (+ (+ (* ?x114 |v9:0|) (* 4 |v7:2|)) ?x118) ?x120) (<= ?x128 (- 16)))))
(let ((?x42 (- 3)))
(let (($x108 (<= (+ (+ (* (- 10) |v3:6|) (* ?x101 |v6:3|)) (* ?x105 |v7:2|)) ?x42)))
(let ((?x46 11))
(let (($x109 (and (<= (+ (+ (* ?x54 |v4:5|) ?x92) (* (- 14) |v4:5|)) ?x46) $x108)))
(let ((?x23 10))
(let (($x85 (<= (+ (+ (* ?x77 |v2:7|) (* 6 |v7:2|)) (* ?x23 |v7:2|)) ?x23)))
(let (($x74 (<= (+ (+ (* 13 |v9:0|) (* ?x67 |v6:3|)) (* ?x71 |v5:4|)) ?x54)))
(let (($x49 (<= (+ (+ (* (- 5) |v5:4|) (* ?x42 |v3:6|)) (* ?x46 |v7:2|)) ?x42)))
(let (($x61 (and $x49 (<= (+ (+ (* ?x51 |v6:3|) (* ?x54 |v7:2|)) (* ?x46 |v9:0|)) ?x23))))
(let ((?x35 (- 10)))
(let ((?x34 (+ (+ (* ?x23 |v6:3|) (* 3 |v3:6|)) (* 9 |v5:4|))))
(let ((?x19 (+ (+ (* 4 |v6:3|) (* 17 |v7:2|)) (* ?x17 |v6:3|))))
(let (($x111 (and (or (and (<= ?x19 ?x17) (<= ?x34 ?x35)) $x61) (or (and $x74 $x85) $x109))))
(or (or $x111 (and (or $x131 $x148) (or (and $x155 (<= ?x162 ?x101)) $x176))) (and (or $x211 (or $x227 (<= ?x231 ?x54))) $x294))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
)
)
)
)
)
)
)
)
)
(check-sat)
(exit)

