(set-info :smt-lib-version 2.6)
(set-logic LRA)
(set-info :source |
   Scholl, Christoph; Disch, Stefan; Pigorsch, Florian and Kupferschmid, 
   Stefan; Using an SMT Solver and Craig Interpolation to Detect and Remove 
   Redundant Linear Constraints in Representations of Non-Convex Polyhedra.
   Proceedings of 6th International Workshop on Satisfiability Modulo
   Theories, Princeton, USA, July 2008.
   <http://abs.informatik.uni-freiburg.de/smtbench/>
|)
(set-info :category "random")
(set-info :status sat)
(declare-fun x1 () Real)
(declare-fun x2 () Real)
(declare-fun x3 () Real)
(assert (exists ((?x1 Real)) (forall ((?x2 Real)) (exists ((?x3 Real)) (let ((?v_19 (* 90 ?x2)) (?v_24 (* 47 ?x1)) (?v_18 (* 59 ?x3)) (?v_16 (* 27 ?x1)) (?v_8 (* 29 ?x1)) (?v_2 (* 75 ?x2)) (?v_4 (* 34 ?x1)) (?v_13 (* 95 ?x2)) (?v_17 (* 1 ?x3)) (?v_15 (* 48 ?x2)) (?v_6 (* 42 ?x2)) (?v_10 (* 60 ?x3)) (?v_23 (* 26 ?x3)) (?v_1 (* (- 9) ?x3)) (?v_22 (* (- 11) ?x2)) (?v_0 (* (- 21) ?x2)) (?v_14 (* (- 14) ?x3)) (?v_21 (+ (* (- 33) ?x1) (* (- 100) ?x2))) (?v_5 (* (- 57) ?x1)) (?v_11 (* (- 95) ?x1)) (?v_3 (* (- 76) ?x3)) (?v_20 (* (- 32) ?x2)) (?v_9 (* (- 70) ?x2)) (?v_7 (* (- 38) ?x1)) (?v_12 (* (- 4) ?x3))) (or (and (or (or (and (and (< (+ (+ (* 12 ?x1) (* 24 ?x2)) ?v_1) 4) (>= (+ ?v_22 (* 94 ?x3)) 0)) (or (>= (+ (+ (* 22 ?x1) (* 46 ?x2)) (* (- 48) ?x3)) 0) (<= (+ (+ (* 6 ?x1) (* (- 29) ?x2)) (* 5 ?x3)) 0))) (and (and (<= (+ (* 93 ?x1) (* (- 8) ?x3)) 69) (or (< (+ (+ (* 41 ?x1) ?v_0) ?v_14) 64) (= (+ (+ (* 14 ?x1) (* 11 ?x2)) (* 34 ?x3)) 0))) (or (or (not (= (+ (* 13 ?x1) (* 68 ?x2)) (- 30))) (>= ?v_19 (- 98))) (<= (+ (* 27 ?x2) (* (- 60) ?x3)) 6)))) (or (and (or (and (> ?v_21 0) (not (= (+ (* (- 19) ?x1) ?v_0) 15))) (and (= (+ ?v_5 (* (- 43) ?x3)) 17) (> (+ (* 15 ?x1) (* 79 ?x2)) 0))) (= (+ ?v_24 (* (- 62) ?x2)) 0)) (and (or (not (= (+ (* 62 ?x1) (* (- 83) ?x2)) 0)) (= (+ ?v_11 (* (- 77) ?x3)) 0)) (>= (+ (+ (* (- 35) ?x1) (* (- 1) ?x2)) (* (- 62) ?x3)) (- 29))))) (or (and (or (not (= (* (- 68) ?x3) (- 36))) (> (+ (+ (* 42 ?x1) (* 83 ?x2)) ?v_18) 6)) (or (or (> (+ (* (- 56) ?x2) ?v_3) (- 28)) (<= (+ (* (- 13) ?x1) (* 79 ?x3)) 0)) (or (= (+ (+ (* (- 85) ?x1) (* 56 ?x2)) ?v_1) 6) (not (= (+ (+ (* (- 82) ?x1) ?v_20) (* 62 ?x3)) 0))))) (and (or (and (and (< (+ (* 74 ?x1) (* 18 ?x2)) 0) (< (+ (+ (* 58 ?x1) ?v_9) (* 42 ?x3)) 46)) (or (= (+ (* (- 4) ?x2) (* (- 1) ?x3)) 0) (<= (+ (* (- 5) ?x1) (* (- 90) ?x2)) 29))) (and (>= (+ (* (- 55) ?x1) (* 16 ?x2)) 49) (< (+ (+ ?v_16 (* 45 ?x2)) (* (- 35) ?x3)) (- 71)))) (and (or (or (> (+ (+ ?v_7 (* (- 98) ?x2)) (* (- 78) ?x3)) 48) (<= (+ ?v_8 ?v_2) (- 91))) (or (<= ?v_2 (- 67)) (<= (+ ?v_4 ?v_13) (- 79)))) (or (or (< (+ (+ (* 63 ?x1) (* (- 44) ?x2)) ?v_12) (- 11)) (< (+ (+ (* 5 ?x1) (* 98 ?x2)) ?v_3) 25)) (and (< (+ (+ (* (- 22) ?x1) (* 9 ?x2)) (* (- 72) ?x3)) (- 11)) (<= (* (- 87) ?x1) 74))))))) (or (and (or (or (and (<= (+ (+ (* (- 96) ?x1) (* (- 46) ?x2)) ?v_17) 0) (= (+ (+ ?v_4 ?v_15) (* 16 ?x3)) 42)) (and (>= (+ (* (- 72) ?x1) (* 97 ?x3)) 0) (> (* 35 ?x2) (- 46)))) (or (and (<= (+ ?v_6 (* (- 64) ?x3)) 45) (<= (+ (* (- 95) ?x2) (* (- 39) ?x3)) 57)) (and (> ?v_10 (- 7)) (>= (+ (+ ?v_5 ?v_6) ?v_23) 0)))) (and (and (or (= (+ (+ ?v_7 (* 69 ?x2)) (* 99 ?x3)) 45) (= (+ (+ ?v_8 (* 97 ?x2)) (* (- 37) ?x3)) 96)) (and (> (+ (+ (* (- 18) ?x1) ?v_9) ?v_10) 68) (<= (+ (+ ?v_11 (* (- 42) ?x2)) ?v_12) (- 51)))) (or (not (= (+ (+ (* 9 ?x1) (* 47 ?x2)) (* 39 ?x3)) 42)) (or (not (= (+ (+ (* 53 ?x1) ?v_13) ?v_14) 20)) (< (* (- 14) ?x1) (- 2)))))) (and (and (and (and (or (>= (+ (+ (* (- 30) ?x1) ?v_15) (* (- 70) ?x3)) 70) (<= (+ (+ ?v_16 (* (- 94) ?x2)) ?v_17) 47)) (and (= (+ (* 39 ?x1) (* 29 ?x2)) 0) (>= (+ (* 58 ?x2) (* 40 ?x3)) (- 2)))) (or (<= (+ (* 35 ?x1) (* (- 58) ?x2)) 0) (= (+ (* (- 9) ?x1) (* (- 88) ?x3)) (- 21)))) (or (and (= (+ (+ (* 94 ?x1) (* (- 60) ?x2)) ?v_18) (- 39)) (> (+ (* 81 ?x2) (* 41 ?x3)) 17)) (and (>= (+ (+ (* 46 ?x1) ?v_19) (* (- 87) ?x3)) 1) (or (= (+ (+ (* 68 ?x1) (* (- 19) ?x2)) (* (- 67) ?x3)) (- 97)) (= (+ (* 86 ?x1) (* (- 20) ?x2)) 80))))) (and (or (and (or (not (= (+ (+ (* (- 100) ?x1) ?v_20) (* (- 69) ?x3)) 12)) (>= (+ (+ (* 80 ?x1) ?v_19) (* 76 ?x3)) (- 23))) (<= (+ ?v_21 (* (- 71) ?x3)) 0)) (and (or (< (* (- 40) ?x2) 34) (> (+ (* 52 ?x1) (* (- 67) ?x2)) (- 84))) (or (not (= (+ (+ (* 98 ?x1) (* (- 75) ?x2)) (* 25 ?x3)) 63)) (> (+ (+ (* 97 ?x1) (* 53 ?x2)) (* (- 5) ?x3)) 21)))) (and (and (< (+ (* (- 23) ?x2) (* 15 ?x3)) (- 80)) (< (+ (* 60 ?x1) ?v_22) 43)) (or (or (<= (+ (* (- 75) ?x1) ?v_23) 71) (= (+ (* 17 ?x1) (* (- 50) ?x3)) 0)) (and (<= (+ ?v_24 (* (- 26) ?x3)) (- 22)) (not (= (+ (+ (* 48 ?x1) ?v_2) (* 52 ?x3)) (- 21)))))))))))))))
(check-sat)
(exit)
