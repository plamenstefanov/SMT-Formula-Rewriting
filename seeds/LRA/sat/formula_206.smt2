(set-info :smt-lib-version 2.6)
(set-logic LRA)
(set-info :source |
   Monniaux, David; Quantifier Elimination by Lazy Model Enumeration, CAV 2010
|)
(set-info :category "random")
; ./Mjollnir_examples/B1/formula_206.m
(set-info :status sat)
(assert
 (forall ((|v9:0| Real) )(exists ((|v8:1| Real) )(forall ((|v7:2| Real) )(exists ((|v6:3| Real) )(forall ((|v5:4| Real) )(exists ((|v4:5| Real) )(forall ((|v3:6| Real) )(exists ((|v2:7| Real) )(forall ((|v1:8| Real) )(exists ((|v0:9| Real) )(let ((?x48 (- 14)))
(let ((?x294 (+ (+ (* (- 17) |v3:6|) (* 6 |v7:2|)) (* (- 5) |v3:6|))))
(let ((?x25 (- 17)))
(let ((?x288 (+ (+ (* 19 |v0:9|) (* 0 |v2:7|)) (* (- 2) |v2:7|))))
(let ((?x281 (+ (+ (* 4 |v7:2|) (* (- 12) |v8:1|)) (* (- 1) |v0:9|))))
(let ((?x142 13))
(let ((?x275 (+ (+ (* (- 18) |v0:9|) (* ?x48 |v4:5|)) (* 0 |v7:2|))))
(let (($x297 (and (or (<= ?x275 ?x142) (<= ?x281 (- 6))) (and (<= ?x288 ?x25) (<= ?x294 ?x48)))))
(let ((?x160 (- 18)))
(let ((?x262 (+ (+ (* (- 10) |v7:2|) (* ?x48 |v2:7|)) (* 9 |v1:8|))))
(let (($x269 (and (<= ?x262 18) (<= (+ (+ (* ?x160 |v2:7|) (* (- 16) |v2:7|)) |v3:6|) ?x160))))
(let ((?x133 (* 2 |v9:0|)))
(let (($x254 (<= (+ (+ (* ?x142 |v5:4|) (* (- 15) |v5:4|)) ?x133) (- 3))))
(let ((?x21 20))
(let ((?x93 15))
(let ((?x116 (* ?x93 |v4:5|)))
(let (($x255 (or (<= (+ (+ (* 16 |v7:2|) (* ?x48 |v8:1|)) ?x116) ?x21) $x254)))
(let ((?x99 (- 4)))
(let ((?x238 (+ (+ (* 0 |v6:3|) (* 7 |v6:3|)) (* ?x142 |v4:5|))))
(let ((?x107 (- 13)))
(let (($x232 (<= (+ (+ (* ?x48 |v9:0|) (* ?x93 |v8:1|)) (* (- 2) |v7:2|)) ?x107)))
(let ((?x121 14))
(let ((?x224 (+ (+ (* 0 |v3:6|) (* 9 |v0:9|)) (* 5 |v8:1|))))
(let ((?x218 (+ (+ (* 18 |v6:3|) (* ?x25 |v6:3|)) (* (- 16) |v6:3|))))
(let (($x212 (<= (+ (+ (* ?x21 |v8:1|) (* ?x160 |v6:3|)) (* 11 |v5:4|)) 5)))
(let ((?x201 (+ (+ (* (- 5) |v5:4|) (* ?x48 |v3:6|)) (* (- 2) |v3:6|))))
(let ((?x171 (- 15)))
(let (($x196 (<= (+ (+ (* ?x99 |v2:7|) (* ?x171 |v1:8|)) (* (- 3) |v1:8|)) ?x171)))
(let ((?x87 9))
(let ((?x190 (+ (+ (* ?x142 |v7:2|) (* 4 |v1:8|)) (* (- 7) |v3:6|))))
(let (($x242 (and (and (or (<= ?x190 ?x87) $x196) (and (<= ?x201 ?x25) $x212)) (and (or (<= ?x218 ?x21) (<= ?x224 ?x121)) (and $x232 (<= ?x238 ?x99))))))
(let ((?x67 0))
(let ((?x11 (* 8 |v3:6|)))
(let ((?x31 (- 20)))
(let (($x174 (<= (+ (+ (* ?x107 |v2:7|) (* (- 6) |v7:2|)) (* ?x171 |v6:3|)) ?x31)))
(let (($x182 (or $x174 (<= (+ (+ (* ?x121 |v8:1|) (* (- 2) |v5:4|)) ?x11) ?x67))))
(let ((?x162 (+ (+ (* 3 |v1:8|) (* (- 5) |v5:4|)) (* ?x160 |v9:0|))))
(let ((?x152 (+ (+ (* ?x142 |v0:9|) (* 12 |v7:2|)) (* (- 16) |v7:2|))))
(let (($x143 (<= (+ (+ ?x133 (* (- 7) |v7:2|)) (* (- 9) |v7:2|)) ?x142)))
(let (($x129 (and (<= (+ (+ (* 18 |v6:3|) ?x116) |v0:9|) ?x87) (<= (+ (+ ?x11 (* ?x121 |v1:8|)) (* (- 3) |v1:8|)) ?x67))))
(let ((?x106 (+ (+ (* ?x99 |v6:3|) (* (- 1) |v6:3|)) (* (- 5) |v6:3|))))
(let (($x109 (and (<= (+ (+ (* ?x87 |v5:4|) (* ?x87 |v7:2|)) (* ?x93 |v7:2|)) ?x67) (<= ?x106 ?x107))))
(let ((?x82 (+ (+ (* (- 11) |v0:9|) (* (- 19) |v8:1|)) (* 3 |v3:6|))))
(let ((?x34 19))
(let ((?x71 (+ (+ (* 4 |v9:0|) (* ?x67 |v6:3|)) (* (- 19) |v3:6|))))
(let ((?x57 (+ (+ (* 6 |v3:6|) (* ?x31 |v1:8|)) (* 6 |v9:0|))))
(let ((?x47 (+ (+ (* (- 19) |v9:0|) (* (- 12) |v9:0|)) (* (- 5) |v1:8|))))
(let (($x22 (<= (+ (+ ?x11 (* (- 8) |v0:9|)) (* (- 19) |v0:9|)) ?x21)))
(let (($x36 (and $x22 (<= (+ (+ (* ?x25 |v0:9|) (* ?x25 |v1:8|)) (* ?x31 |v0:9|)) ?x34))))
(let (($x111 (and (or $x36 (and (<= ?x47 ?x48) (<= ?x57 10))) (or (or (<= ?x71 ?x34) (<= ?x82 10)) $x109))))
(let (($x185 (or $x111 (or (or $x129 (or $x143 (<= ?x152 ?x31))) (or (<= ?x162 ?x142) $x182)))))
(or $x185 (or $x242 (and (or $x255 $x269) $x297)))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
)
)
)
)
)
)
)
)
)
(check-sat)
(exit)

