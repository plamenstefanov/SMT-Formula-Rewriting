(set-info :smt-lib-version 2.6)
(set-logic LRA)
(set-info :source |
   Monniaux, David; Quantifier Elimination by Lazy Model Enumeration, CAV 2010
|)
(set-info :category "random")
; ./Mjollnir_examples/B1/formula_215.m
(set-info :status sat)
(assert
 (forall ((|v9:0| Real) )(exists ((|v8:1| Real) )(forall ((|v7:2| Real) )(exists ((|v6:3| Real) )(forall ((|v5:4| Real) )(exists ((|v4:5| Real) )(forall ((|v3:6| Real) )(exists ((|v2:7| Real) )(forall ((|v1:8| Real) )(exists ((|v0:9| Real) )(let ((?x73 4))
(let ((?x172 (+ (+ (* (- 1) |v0:9|) (* (- 2) |v6:3|)) (* 9 |v5:4|))))
(let ((?x53 10))
(let ((?x162 (+ (+ (* (- 6) |v6:3|) (* (- 2) |v4:5|)) (* ?x73 |v2:7|))))
(let ((?x153 (+ (+ (* 9 |v7:2|) (* (- 15) |v1:8|)) (* 13 |v8:1|))))
(let (($x142 (<= (+ (+ (* (- 10) |v2:7|) |v9:0|) (* 15 |v0:9|)) (- 1))))
(let ((?x131 (+ (+ (* (- 9) |v6:3|) (* (- 16) |v0:9|)) (* 11 |v8:1|))))
(let (($x165 (and (or (<= ?x131 1) $x142) (or (<= ?x153 2) (<= ?x162 ?x53)))))
(let ((?x25 (- 9)))
(let ((?x122 (+ (+ (* (- 5) |v8:1|) (* 3 |v9:0|)) (* 5 |v7:2|))))
(let ((?x115 (+ (+ (* 6 |v9:0|) (* 13 |v0:9|)) (* (- 16) |v6:3|))))
(let ((?x101 (+ (+ (* (- 20) |v7:2|) (* 14 |v0:9|)) (* (- 14) |v7:2|))))
(let ((?x43 8))
(let (($x95 (<= (+ (+ (* 3 |v8:1|) (* (- 7) |v8:1|)) |v5:4|) ?x43)))
(let (($x125 (or (or $x95 (<= ?x101 16)) (or (<= ?x115 (- 19)) (<= ?x122 ?x25)))))
(let ((?x86 (+ (+ (* (- 5) |v3:6|) (* 11 |v4:5|)) (* ?x25 |v5:4|))))
(let ((?x72 (+ (+ (* 13 |v3:6|) (* ?x43 |v9:0|)) (* 3 |v7:2|))))
(let ((?x60 (+ (+ (* 18 |v0:9|) (* ?x53 |v9:0|)) (* (- 10) |v1:8|))))
(let ((?x42 (+ (+ (* (- 7) |v7:2|) (* (- 14) |v9:0|)) (* 14 |v7:2|))))
(let ((?x22 (- 20)))
(let ((?x32 (+ (+ (* ?x25 |v2:7|) (* (- 7) |v9:0|)) (* 14 |v3:6|))))
(let ((?x21 (+ (+ (* (- 6) |v3:6|) (* 12 |v9:0|)) (* 14 |v2:7|))))
(let (($x89 (and (or (<= ?x21 ?x22) (or (<= ?x32 ?x22) (<= ?x42 ?x43))) (and (and (<= ?x60 5) (<= ?x72 ?x73)) (<= ?x86 ?x53)))))
(or (and $x89 (or $x125 $x165)) (<= ?x172 ?x73))))))))))))))))))))))))))
)
)
)
)
)
)
)
)
)
)
(check-sat)
(exit)

