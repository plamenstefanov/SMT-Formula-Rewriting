(set-info :smt-lib-version 2.6)
(set-logic LRA)
(set-info :source |
   Monniaux, David; Quantifier Elimination by Lazy Model Enumeration, CAV 2010
|)
(set-info :category "random")
; ./Mjollnir_examples/B1/formula_220.m
(set-info :status sat)
(assert
 (forall ((|v9:0| Real) )(exists ((|v8:1| Real) )(forall ((|v7:2| Real) )(exists ((|v6:3| Real) )(forall ((|v5:4| Real) )(exists ((|v4:5| Real) )(forall ((|v3:6| Real) )(exists ((|v2:7| Real) )(forall ((|v1:8| Real) )(exists ((|v0:9| Real) )(let ((?x101 16))
(let ((?x291 (+ (+ (* (- 20) |v7:2|) (* (- 2) |v1:8|)) (* 5 |v0:9|))))
(let ((?x286 (+ (+ (* (- 10) |v4:5|) (* 10 |v7:2|)) (* (- 15) |v9:0|))))
(let ((?x158 (- 4)))
(let ((?x279 (+ (+ (* (- 7) |v9:0|) (* 13 |v6:3|)) (* 17 |v8:1|))))
(let ((?x239 (- 1)))
(let ((?x188 (- 14)))
(let ((?x201 (* ?x188 |v2:7|)))
(let (($x275 (<= (+ (+ (* (- 8) |v7:2|) (* (- 11) |v7:2|)) ?x201) ?x239)))
(let (($x294 (or (or $x275 (<= ?x279 ?x158)) (or (<= ?x286 (- 9)) (<= ?x291 ?x101)))))
(let ((?x268 (+ (+ (* 20 |v3:6|) (* (- 15) |v2:7|)) (* ?x158 |v8:1|))))
(let ((?x135 (- 5)))
(let ((?x264 (+ (+ (* 14 |v1:8|) (* ?x239 |v4:5|)) (* (- 20) |v4:5|))))
(let ((?x123 12))
(let ((?x257 (+ (+ (* ?x188 |v0:9|) (* 4 |v1:8|)) (* (- 18) |v8:1|))))
(let ((?x86 (- 10)))
(let ((?x98 (- 20)))
(let ((?x250 (* ?x98 |v7:2|)))
(let (($x252 (<= (+ (+ (* 15 |v2:7|) (* 5 |v1:8|)) ?x250) ?x86)))
(let (($x271 (and (or $x252 (<= ?x257 ?x123)) (or (<= ?x264 ?x135) (<= ?x268 (- 12))))))
(let (($x244 (<= (+ (+ (* ?x239 |v6:3|) (* 6 |v6:3|)) |v0:9|) (- 17))))
(let ((?x36 5))
(let ((?x236 (+ (+ (* ?x123 |v3:6|) (* (- 6) |v5:4|)) (* 13 |v7:2|))))
(let (($x228 (<= (+ (+ (* 7 |v6:3|) |v0:9|) (* 13 |v9:0|)) ?x86)))
(let ((?x221 (+ (+ (* (- 15) |v2:7|) (* (- 3) |v8:1|)) (* 17 |v4:5|))))
(let ((?x55 (- 2)))
(let ((?x126 (* (- 11) |v7:2|)))
(let (($x213 (<= (+ (+ (* 9 |v7:2|) (* 4 |v4:5|)) ?x126) ?x55)))
(let (($x214 (and (<= (+ (+ ?x201 (* (- 8) |v9:0|)) (* ?x55 |v8:1|)) ?x55) $x213)))
(let ((?x118 (- 7)))
(let ((?x198 (+ (+ (* 18 |v8:1|) (* 11 |v5:4|)) (* (- 16) |v7:2|))))
(let ((?x190 (+ (+ (* 8 |v0:9|) (* (- 12) |v8:1|)) (* ?x188 |v5:4|))))
(let (($x247 (or (and (and (<= ?x190 ?x101) (<= ?x198 ?x118)) $x214) (and (or (<= ?x221 (- 17)) $x228) (or (<= ?x236 ?x36) $x244)))))
(let ((?x93 20))
(let ((?x68 (* 10 |v8:1|)))
(let (($x177 (<= (+ (+ (* 15 |v2:7|) (* 0 |v2:7|)) ?x68) ?x93)))
(let ((?x171 (+ (+ (* (- 15) |v3:6|) (* (- 9) |v4:5|)) (* ?x158 |v4:5|))))
(let ((?x27 9))
(let (($x161 (<= (+ (+ (* (- 18) |v1:8|) (* ?x118 |v5:4|)) (* ?x158 |v9:0|)) ?x27)))
(let ((?x141 (* 8 |v3:6|)))
(let (($x152 (<= (+ (+ (* 18 |v5:4|) (* 7 |v3:6|)) ?x141) 1)))
(let ((?x52 0))
(let (($x144 (and (<= (+ (+ ?x126 (* ?x93 |v5:4|)) (* 18 |v7:2|)) ?x52) (<= (+ (+ (* ?x135 |v1:8|) (* ?x135 |v0:9|)) ?x141) ?x101))))
(let ((?x122 (+ (+ (* (- 8) |v1:8|) (* ?x118 |v7:2|)) (* (- 18) |v4:5|))))
(let ((?x112 (+ (+ (* 14 |v6:3|) (* ?x86 |v0:9|)) (* 13 |v3:6|))))
(let (($x180 (or (or (or (<= ?x112 (- 3)) (<= ?x122 ?x123)) $x144) (or (or $x152 $x161) (and (<= ?x171 ?x158) $x177)))))
(let (($x102 (<= (+ (+ (* ?x93 |v3:6|) (* 7 |v0:9|)) (* ?x98 |v3:6|)) ?x101)))
(let ((?x88 (+ (+ (* (- 18) |v0:9|) (* (- 11) |v3:6|)) (* ?x86 |v5:4|))))
(let ((?x76 7))
(let (($x77 (<= (+ (+ ?x68 (* 2 |v7:2|)) (* 17 |v2:7|)) ?x76)))
(let (($x61 (<= (+ (+ (* ?x52 |v4:5|) (* ?x55 |v0:9|)) (* ?x36 |v4:5|)) (- 13))))
(let (($x49 (<= (+ (+ (* 6 |v4:5|) |v1:8|) (* 17 |v5:4|)) 3)))
(let (($x37 (<= (+ (+ (* ?x27 |v0:9|) (* 13 |v6:3|)) (* ?x27 |v4:5|)) ?x36)))
(let ((?x21 (+ (+ (* (- 8) |v3:6|) (* 15 |v6:3|)) (* 6 |v2:7|))))
(let (($x104 (or (and (or (<= ?x21 11) $x37) (or $x49 $x61)) (or (or $x77 (<= ?x88 ?x36)) $x102))))
(or (and $x104 $x180) (and $x247 (and $x271 $x294)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
)
)
)
)
)
)
)
)
)
(check-sat)
(exit)

