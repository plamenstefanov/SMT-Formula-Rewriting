(set-info :smt-lib-version 2.6)
(set-logic LRA)
(set-info :source |
   Monniaux, David; Quantifier Elimination by Lazy Model Enumeration, CAV 2010
|)
(set-info :category "random")
; ./Mjollnir_examples/B1/formula_042.m
(set-info :status sat)
(assert
 (forall ((|v9:0| Real) )(exists ((|v8:1| Real) )(forall ((|v7:2| Real) )(exists ((|v6:3| Real) )(forall ((|v5:4| Real) )(exists ((|v4:5| Real) )(forall ((|v3:6| Real) )(exists ((|v2:7| Real) )(forall ((|v1:8| Real) )(exists ((|v0:9| Real) )(let ((?x121 (- 3)))
(let ((?x270 (+ (+ (* (- 12) |v5:4|) (* 13 |v8:1|)) (* ?x121 |v0:9|))))
(let ((?x26 5))
(let ((?x264 (+ (+ (* (- 4) |v1:8|) (* (- 4) |v4:5|)) (* 12 |v5:4|))))
(let ((?x172 14))
(let ((?x257 (+ (+ (* (- 20) |v8:1|) (* 3 |v7:2|)) (* (- 5) |v4:5|))))
(let ((?x250 (+ (+ (* (- 11) |v3:6|) (* 8 |v4:5|)) (* ?x121 |v9:0|))))
(let (($x273 (and (or (<= ?x250 (- 5)) (<= ?x257 ?x172)) (or (<= ?x264 ?x26) (<= ?x270 ?x121)))))
(let ((?x53 (- 7)))
(let ((?x65 (- 13)))
(let ((?x174 (* ?x65 |v4:5|)))
(let (($x242 (<= (+ (+ (* (- 4) |v9:0|) (* 15 |v2:7|)) ?x174) ?x53)))
(let ((?x98 (- 10)))
(let ((?x236 (+ (+ (* 3 |v1:8|) (* 17 |v8:1|)) (* 2 |v5:4|))))
(let ((?x228 (+ (+ (* (- 4) |v2:7|) (* ?x172 |v5:4|)) (* 0 |v3:6|))))
(let ((?x219 (+ (+ (* (- 6) |v7:2|) (* 17 |v7:2|)) (* 13 |v3:6|))))
(let ((?x213 (+ (+ (* (- 15) |v6:3|) (* 11 |v2:7|)) (* (- 17) |v6:3|))))
(let ((?x206 (+ (+ (* (- 16) |v2:7|) (* (- 12) |v4:5|)) (* (- 20) |v1:8|))))
(let ((?x201 (+ (+ (* ?x172 |v8:1|) (* 7 |v9:0|)) (* (- 1) |v8:1|))))
(let (($x222 (and (and (<= ?x201 16) (<= ?x206 9)) (and (<= ?x213 18) (<= ?x219 ?x121)))))
(let ((?x33 (- 17)))
(let (($x194 (<= (+ (+ (* (- 6) |v2:7|) (* ?x53 |v4:5|)) (* ?x65 |v1:8|)) ?x33)))
(let ((?x169 (- 4)))
(let ((?x187 (+ (+ (* (- 11) |v7:2|) (* 10 |v4:5|)) (* (- 12) |v6:3|))))
(let ((?x88 (- 12)))
(let (($x173 (<= (+ (+ (* 3 |v9:0|) (* ?x26 |v1:8|)) (* ?x169 |v7:2|)) ?x172)))
(let (($x182 (and $x173 (<= (+ (+ ?x174 (* 12 |v9:0|)) (* ?x33 |v3:6|)) ?x88))))
(let (($x275 (or (or (and $x182 (and (<= ?x187 ?x169) $x194)) $x222) (and (and (<= ?x228 (- 8)) (or (<= ?x236 ?x98) $x242)) $x273))))
(let (($x160 (<= (+ (+ (* ?x26 |v2:7|) (* ?x65 |v2:7|)) (* 7 |v4:5|)) ?x53)))
(let ((?x153 (+ (+ (* 13 |v6:3|) (* (- 15) |v1:8|)) (* (- 15) |v3:6|))))
(let ((?x102 (- 16)))
(let (($x146 (<= (+ (+ |v7:2| (* (- 1) |v6:3|)) (* 11 |v9:0|)) ?x102)))
(let ((?x140 (+ (+ (* 0 |v2:7|) (* ?x65 |v3:6|)) (* 19 |v5:4|))))
(let ((?x132 (+ (+ (* 11 |v3:6|) (* 0 |v8:1|)) (* (- 1) |v9:0|))))
(let (($x163 (or (<= ?x132 ?x33) (and (and (<= ?x140 ?x121) $x146) (and (<= ?x153 ?x98) $x160)))))
(let ((?x118 13))
(let ((?x119 (* ?x118 |v6:3|)))
(let ((?x45 17))
(let ((?x109 (+ (+ (* ?x102 |v0:9|) (* 7 |v8:1|)) (* 3 |v2:7|))))
(let (($x123 (or (<= ?x109 ?x45) (<= (+ (+ (* ?x98 |v8:1|) (* 6 |v0:9|)) ?x119) ?x121))))
(let ((?x97 (+ (+ (* ?x88 |v4:5|) (* (- 6) |v4:5|)) (* 10 |v6:3|))))
(let ((?x84 3))
(let ((?x83 (+ (+ (* 9 |v2:7|) (* (- 14) |v8:1|)) (* 15 |v7:2|))))
(let ((?x67 (+ (+ (* 18 |v6:3|) (* 15 |v3:6|)) (* ?x65 |v6:3|))))
(let ((?x52 (+ (+ (* 11 |v1:8|) (* ?x45 |v6:3|)) (* (- 8) |v7:2|))))
(let ((?x36 (- 11)))
(let ((?x21 (+ (+ (* 0 |v4:5|) (* 16 |v1:8|)) (* (- 20) |v0:9|))))
(let (($x38 (and (<= ?x21 8) (<= (+ (+ (* ?x26 |v1:8|) (* ?x26 |v5:4|)) (* ?x33 |v9:0|)) ?x36))))
(let (($x125 (or (or $x38 (or (<= ?x52 ?x53) (<= ?x67 (- 18)))) (or (or (<= ?x83 ?x84) (<= ?x97 ?x98)) $x123))))
(and (or $x125 $x163) $x275)))))))))))))))))))))))))))))))))))))))))))))))))))
)
)
)
)
)
)
)
)
)
)
(check-sat)
(exit)

