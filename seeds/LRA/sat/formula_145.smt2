(set-info :smt-lib-version 2.6)
(set-logic LRA)
(set-info :source |
   Monniaux, David; Quantifier Elimination by Lazy Model Enumeration, CAV 2010
|)
(set-info :category "random")
; ./Mjollnir_examples/B1/formula_145.m
(set-info :status sat)
(assert
 (forall ((|v9:0| Real) )(exists ((|v8:1| Real) )(forall ((|v7:2| Real) )(exists ((|v6:3| Real) )(forall ((|v5:4| Real) )(exists ((|v4:5| Real) )(forall ((|v3:6| Real) )(exists ((|v2:7| Real) )(forall ((|v1:8| Real) )(exists ((|v0:9| Real) )(let ((?x102 (- 9)))
(let ((?x180 (+ (+ (* 7 |v3:6|) (* 10 |v2:7|)) (* 12 |v7:2|))))
(let ((?x170 (+ (+ (* 12 |v5:4|) (* 13 |v3:6|)) (* 19 |v6:3|))))
(let ((?x162 (+ (+ (* 0 |v6:3|) (* (- 5) |v1:8|)) (* (- 2) |v8:1|))))
(let ((?x151 (+ (+ (* 12 |v0:9|) (* (- 7) |v2:7|)) (* (- 5) |v9:0|))))
(let (($x173 (and (<= ?x151 7) (or (<= ?x162 ?x102) (<= ?x170 (- 18))))))
(let (($x140 (<= (+ (+ (* (- 17) |v5:4|) (* (- 10) |v7:2|)) |v4:5|) (- 16))))
(let ((?x132 (+ (+ (* (- 17) |v2:7|) (* 17 |v5:4|)) (* 16 |v5:4|))))
(let ((?x122 (+ (+ (* 14 |v3:6|) (* (- 20) |v3:6|)) (* (- 16) |v0:9|))))
(let (($x174 (and (and (and (<= ?x122 1) (<= ?x132 (- 18))) $x140) $x173)))
(let ((?x108 (+ (+ (* (- 11) |v1:8|) (* 17 |v9:0|)) (* ?x102 |v5:4|))))
(let ((?x101 (+ (+ (* 11 |v3:6|) (* 15 |v8:1|)) (* (- 11) |v7:2|))))
(let ((?x91 (+ (+ (* (- 11) |v6:3|) (* (- 14) |v7:2|)) (* 4 |v2:7|))))
(let ((?x80 (+ (+ (* 4 |v8:1|) (* 13 |v8:1|)) (* (- 19) |v8:1|))))
(let (($x111 (and (and (<= ?x80 (- 19)) (<= ?x91 1)) (and (<= ?x101 ?x102) (<= ?x108 8)))))
(let ((?x65 (+ (+ (* (- 12) |v2:7|) (* (- 20) |v1:8|)) (* 8 |v1:8|))))
(let ((?x50 (+ (+ (* 17 |v5:4|) (* (- 3) |v4:5|)) (* (- 1) |v1:8|))))
(let ((?x34 (+ (+ (* (- 4) |v3:6|) (* 15 |v8:1|)) (* 2 |v1:8|))))
(let ((?x19 (- 5)))
(let (($x20 (<= (+ (+ (* (- 15) |v9:0|) (* 5 |v7:2|)) |v6:3|) ?x19)))
(let (($x69 (and (and $x20 (<= ?x34 2)) (or (<= ?x50 10) (<= ?x65 (- 10))))))
(or (or (or $x69 $x111) $x174) (<= ?x180 ?x102))))))))))))))))))))))))
)
)
)
)
)
)
)
)
)
)
(check-sat)
(exit)

