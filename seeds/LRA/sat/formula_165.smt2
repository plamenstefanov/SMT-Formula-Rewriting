(set-info :smt-lib-version 2.6)
(set-logic LRA)
(set-info :source |
   Monniaux, David; Quantifier Elimination by Lazy Model Enumeration, CAV 2010
|)
(set-info :category "random")
; ./Mjollnir_examples/B1/formula_165.m
(set-info :status sat)
(assert
 (forall ((|v9:0| Real) )(exists ((|v8:1| Real) )(forall ((|v7:2| Real) )(exists ((|v6:3| Real) )(forall ((|v5:4| Real) )(exists ((|v4:5| Real) )(forall ((|v3:6| Real) )(exists ((|v2:7| Real) )(forall ((|v1:8| Real) )(exists ((|v0:9| Real) )(let ((?x285 (+ (+ (* (- 15) |v2:7|) (* (- 14) |v0:9|)) (* 5 |v1:8|))))
(let ((?x117 (- 17)))
(let ((?x279 (+ (+ (* 12 |v5:4|) (* (- 5) |v7:2|)) (* (- 6) |v8:1|))))
(let ((?x21 5))
(let ((?x46 12))
(let ((?x229 (* ?x46 |v0:9|)))
(let ((?x18 (- 18)))
(let ((?x59 4))
(let ((?x182 (* ?x59 |v4:5|)))
(let (($x269 (<= (+ (+ (* 10 |v9:0|) (* (- 12) |v3:6|)) ?x182) ?x18)))
(let (($x275 (or $x269 (<= (+ (+ (* 19 |v7:2|) (* ?x117 |v6:3|)) ?x229) ?x21))))
(let ((?x30 (- 9)))
(let ((?x261 (+ (+ (* (- 8) |v7:2|) (* 3 |v9:0|)) (* 2 |v4:5|))))
(let (($x263 (and (<= (+ (+ (* (- 13) |v6:3|) |v2:7|) |v4:5|) 8) (<= ?x261 ?x30))))
(let ((?x226 (- 8)))
(let ((?x250 (+ (+ (* (- 5) |v7:2|) (* 14 |v0:9|)) (* ?x30 |v1:8|))))
(let ((?x115 (* 11 |v1:8|)))
(let (($x245 (<= (+ (+ (* 14 |v1:8|) (* (- 10) |v1:8|)) ?x115) 18)))
(let (($x290 (or (and (or $x245 (<= ?x250 ?x226)) $x263) (and $x275 (and (<= ?x279 ?x117) (<= ?x285 (- 2)))))))
(let ((?x88 (- 5)))
(let ((?x237 (+ (+ (* ?x30 |v9:0|) (* 13 |v4:5|)) (* (- 13) |v1:8|))))
(let ((?x42 8))
(let ((?x220 (+ (+ (* ?x18 |v2:7|) (* (- 12) |v6:3|)) (* (- 14) |v3:6|))))
(let (($x232 (and (<= ?x220 ?x42) (<= (+ (+ (* 6 |v1:8|) (* ?x226 |v8:1|)) ?x229) ?x226))))
(let ((?x162 (- 6)))
(let ((?x210 (+ (+ (* 10 |v4:5|) (* 14 |v4:5|)) (* ?x59 |v8:1|))))
(let ((?x13 0))
(let (($x205 (<= (+ (+ (* ?x30 |v4:5|) (* 3 |v4:5|)) (* ?x42 |v6:3|)) ?x13)))
(let (($x198 (<= (+ (+ (* 2 |v3:6|) (* ?x42 |v5:4|)) (* ?x59 |v6:3|)) ?x13)))
(let (($x192 (<= (+ (+ ?x182 (* (- 10) |v5:4|)) (* (- 19) |v5:4|)) 18)))
(let (($x240 (and (or (or $x192 $x198) (or $x205 (<= ?x210 ?x162))) (and $x232 (<= ?x237 ?x88)))))
(let ((?x51 (- 3)))
(let (($x176 (<= (+ (+ (* 3 |v6:3|) (* ?x51 |v7:2|)) (* ?x117 |v2:7|)) ?x51)))
(let ((?x95 17))
(let (($x170 (<= (+ (+ (* ?x162 |v7:2|) (* (- 13) |v8:1|)) (* ?x88 |v1:8|)) ?x95)))
(let ((?x158 (+ (+ (* (- 1) |v4:5|) (* 2 |v5:4|)) (* (- 7) |v6:3|))))
(let ((?x147 (+ (+ (* 19 |v4:5|) (* (- 20) |v0:9|)) (* ?x117 |v8:1|))))
(let (($x178 (and (or (<= ?x147 (- 11)) (<= ?x158 (- 11))) (and $x170 $x176))))
(let ((?x62 13))
(let ((?x128 (* ?x62 |v8:1|)))
(let ((?x54 19))
(let (($x140 (or (<= (+ (+ (* 15 |v6:3|) ?x128) (* ?x54 |v3:6|)) ?x54) (<= (+ (+ (* ?x88 |v6:3|) (* (- 4) |v5:4|)) ?x128) ?x30))))
(let (($x125 (<= (+ (+ (* ?x30 |v6:3|) (* 16 |v6:3|)) (* ?x42 |v7:2|)) ?x95)))
(let (($x118 (<= (+ (+ (* 15 |v7:2|) (* 3 |v7:2|)) ?x115) ?x117)))
(let (($x103 (<= (+ (+ (* ?x30 |v0:9|) (* ?x95 |v5:4|)) (* 15 |v1:8|)) 16)))
(let ((?x90 (+ (+ (* 10 |v7:2|) (* 2 |v2:7|)) (* ?x88 |v8:1|))))
(let ((?x77 14))
(let ((?x35 (* (- 20) |v3:6|)))
(let (($x69 (<= (+ (+ (* ?x59 |v9:0|) (* ?x62 |v1:8|)) (* 7 |v2:7|)) 1)))
(let (($x79 (or $x69 (<= (+ (+ (* ?x62 |v3:6|) (* 2 |v9:0|)) ?x35) ?x77))))
(let (($x38 (<= (+ (+ (* (- 14) |v0:9|) (* ?x30 |v3:6|)) ?x35) 7)))
(let (($x22 (<= (+ (+ (* (- 15) |v4:5|) (* ?x13 |v4:5|)) (* ?x18 |v9:0|)) ?x21)))
(let (($x56 (or (and $x22 $x38) (<= (+ (+ (* ?x42 |v4:5|) (* ?x46 |v1:8|)) (* ?x51 |v5:4|)) ?x54))))
(let (($x180 (and (and $x56 (or $x79 (or (<= ?x90 ?x21) $x103))) (or (or (and $x118 $x125) $x140) $x178))))
(or $x180 (or $x240 $x290)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
)
)
)
)
)
)
)
)
)
(check-sat)
(exit)

