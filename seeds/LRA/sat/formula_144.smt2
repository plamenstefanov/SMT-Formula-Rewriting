(set-info :smt-lib-version 2.6)
(set-logic LRA)
(set-info :source |
   Monniaux, David; Quantifier Elimination by Lazy Model Enumeration, CAV 2010
|)
(set-info :category "random")
; ./Mjollnir_examples/B1/formula_144.m
(set-info :status sat)
(assert
 (forall ((|v9:0| Real) )(exists ((|v8:1| Real) )(forall ((|v7:2| Real) )(exists ((|v6:3| Real) )(forall ((|v5:4| Real) )(exists ((|v4:5| Real) )(forall ((|v3:6| Real) )(exists ((|v2:7| Real) )(forall ((|v1:8| Real) )(exists ((|v0:9| Real) )(let ((?x181 (+ (+ (* (- 19) |v0:9|) (* 13 |v7:2|)) (* 18 |v0:9|))))
(let ((?x174 (+ (+ (* (- 7) |v9:0|) (* (- 9) |v3:6|)) (* 0 |v0:9|))))
(let ((?x165 (+ (+ (* (- 7) |v9:0|) (* 6 |v7:2|)) (* 2 |v4:5|))))
(let ((?x156 (+ (+ (* (- 6) |v3:6|) (* (- 14) |v1:8|)) (* 15 |v7:2|))))
(let ((?x19 (* (- 14) |v3:6|)))
(let (($x148 (<= (+ (+ (* (- 18) |v7:2|) (* 0 |v2:7|)) ?x19) (- 15))))
(let ((?x136 (+ (+ (* 18 |v2:7|) (* 14 |v9:0|)) (* 4 |v8:1|))))
(let (($x169 (and (or (<= ?x136 5) $x148) (and (<= ?x156 (- 17)) (<= ?x165 11)))))
(let ((?x74 (- 6)))
(let ((?x123 (+ (+ (* (- 12) |v5:4|) (* 7 |v2:7|)) (* (- 2) |v4:5|))))
(let ((?x27 (* (- 4) |v6:3|)))
(let (($x113 (<= (+ (+ (* (- 10) |v0:9|) (* (- 17) |v3:6|)) ?x27) 19)))
(let ((?x101 (+ (+ (* (- 16) |v8:1|) (* (- 19) |v2:7|)) (* (- 5) |v0:9|))))
(let ((?x64 4))
(let (($x91 (<= (+ (+ (* (- 7) |v3:6|) (* 7 |v5:4|)) ?x19) ?x64)))
(let (($x170 (or (and (or $x91 (<= ?x101 3)) (or $x113 (<= ?x123 ?x74))) $x169)))
(let ((?x83 (+ (+ (* ?x74 |v5:4|) (* 12 |v5:4|)) (* (- 16) |v5:4|))))
(let ((?x67 7))
(let ((?x66 (+ (+ (* 19 |v5:4|) (* (- 9) |v0:9|)) (* ?x64 |v9:0|))))
(let ((?x51 (+ (+ (* 10 |v2:7|) (* 9 |v0:9|)) (* (- 7) |v8:1|))))
(let (($x37 (<= (+ (+ ?x27 (* (- 13) |v3:6|)) (* (- 11) |v3:6|)) 6)))
(let (($x22 (<= (+ (+ (* 13 |v1:8|) (* 16 |v1:8|)) ?x19) (- 15))))
(let (($x86 (and (and $x22 (or $x37 (or (<= ?x51 16) (<= ?x66 ?x67)))) (<= ?x83 8))))
(or $x86 (and $x170 (or (<= ?x174 (- 10)) (<= ?x181 (- 1)))))))))))))))))))))))))))))
)
)
)
)
)
)
)
)
)
)
(check-sat)
(exit)

