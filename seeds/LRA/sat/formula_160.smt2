(set-info :smt-lib-version 2.6)
(set-logic LRA)
(set-info :source |
   Monniaux, David; Quantifier Elimination by Lazy Model Enumeration, CAV 2010
|)
(set-info :category "random")
; ./Mjollnir_examples/B1/formula_160.m
(set-info :status sat)
(assert
 (forall ((|v9:0| Real) )(exists ((|v8:1| Real) )(forall ((|v7:2| Real) )(exists ((|v6:3| Real) )(forall ((|v5:4| Real) )(exists ((|v4:5| Real) )(forall ((|v3:6| Real) )(exists ((|v2:7| Real) )(forall ((|v1:8| Real) )(exists ((|v0:9| Real) )(let (($x156 (<= (+ (+ (* 4 |v3:6|) |v9:0|) (* 7 |v6:3|)) 12)))
(let ((?x39 2))
(let ((?x148 (+ (+ (* 14 |v6:3|) (* 3 |v1:8|)) (* (- 7) |v0:9|))))
(let ((?x33 11))
(let ((?x140 (+ (+ (* (- 16) |v9:0|) (* 15 |v5:4|)) (* ?x33 |v5:4|))))
(let ((?x130 (+ (+ (* (- 15) |v7:2|) (* 18 |v5:4|)) (* (- 6) |v8:1|))))
(let (($x158 (and (and (<= ?x130 6) (<= ?x140 ?x33)) (or (<= ?x148 ?x39) $x156))))
(let ((?x123 (+ (+ (* 6 |v8:1|) (* (- 7) |v3:6|)) (* (- 2) |v2:7|))))
(let ((?x10 16))
(let ((?x112 (+ (+ (* 18 |v8:1|) (* (- 18) |v9:0|)) (* (- 12) |v7:2|))))
(let ((?x104 (+ (+ (* (- 5) |v3:6|) (* (- 6) |v7:2|)) (* ?x10 |v0:9|))))
(let (($x125 (or (and (<= ?x104 13) (<= ?x112 ?x10)) (<= ?x123 (- 17)))))
(let ((?x29 9))
(let ((?x93 (+ (+ (* (- 12) |v9:0|) (* (- 15) |v5:4|)) (* (- 17) |v1:8|))))
(let (($x81 (<= (+ (+ (* 13 |v0:9|) (* (- 3) |v8:1|)) |v6:3|) (- 19))))
(let ((?x68 (+ (+ (* 5 |v8:1|) (* ?x39 |v7:2|)) (* (- 15) |v4:5|))))
(let ((?x57 (+ (+ (* (- 2) |v4:5|) (* 14 |v6:3|)) (* 12 |v4:5|))))
(let ((?x26 18))
(let (($x60 (or (<= (+ (+ (* ?x39 |v7:2|) (* ?x39 |v6:3|)) (* ?x29 |v0:9|)) ?x26) (<= ?x57 5))))
(let ((?x22 7))
(let (($x61 (and (<= (+ (+ (* ?x26 |v1:8|) (* ?x29 |v2:7|)) (* ?x33 |v2:7|)) ?x22) $x60)))
(let (($x160 (or (or $x61 (and (and (<= ?x68 0) $x81) (<= ?x93 ?x29))) (or $x125 $x158))))
(let ((?x21 (+ (+ (* ?x10 |v2:7|) (* (- 5) |v8:1|)) (* 14 |v4:5|))))
(and (<= ?x21 ?x22) $x160)))))))))))))))))))))))))
)
)
)
)
)
)
)
)
)
)
(check-sat)
(exit)

