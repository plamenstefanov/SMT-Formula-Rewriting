(set-info :smt-lib-version 2.6)
(set-logic LRA)
(set-info :source |
   Monniaux, David; Quantifier Elimination by Lazy Model Enumeration, CAV 2010
|)
(set-info :category "random")
; ./Mjollnir_examples/B1/formula_054.m
(set-info :status unsat)
(assert
 (forall ((|v9:0| Real) )(exists ((|v8:1| Real) )(forall ((|v7:2| Real) )(exists ((|v6:3| Real) )(forall ((|v5:4| Real) )(exists ((|v4:5| Real) )(forall ((|v3:6| Real) )(exists ((|v2:7| Real) )(forall ((|v1:8| Real) )(exists ((|v0:9| Real) )(let ((?x55 10))
(let ((?x279 (+ (+ (* (- 15) |v7:2|) (* 6 |v6:3|)) (* 19 |v4:5|))))
(let ((?x273 (+ (+ (* (- 14) |v4:5|) (* (- 16) |v0:9|)) (* (- 19) |v5:4|))))
(let ((?x267 (+ (+ (* 20 |v8:1|) (* 6 |v5:4|)) (* 0 |v1:8|))))
(let ((?x260 (+ (+ (* (- 16) |v5:4|) (* (- 7) |v3:6|)) (* (- 15) |v2:7|))))
(let (($x282 (and (or (<= ?x260 3) (<= ?x267 ?x55)) (and (<= ?x273 (- 11)) (<= ?x279 ?x55)))))
(let ((?x251 (+ (+ (* (- 1) |v3:6|) (* (- 19) |v7:2|)) (* (- 14) |v3:6|))))
(let ((?x82 (- 19)))
(let (($x247 (<= (+ (+ |v3:6| (* 2 |v6:3|)) (* (- 4) |v1:8|)) ?x82)))
(let ((?x239 (+ (+ (* (- 15) |v4:5|) (* (- 7) |v5:4|)) (* (- 17) |v1:8|))))
(let ((?x234 (+ (+ (* (- 17) |v8:1|) (* (- 8) |v0:9|)) (* (- 5) |v5:4|))))
(let (($x254 (and (and (<= ?x234 (- 9)) (<= ?x239 (- 12))) (or $x247 (<= ?x251 5)))))
(let ((?x188 15))
(let ((?x225 (+ (+ (* (- 13) |v5:4|) (* 12 |v8:1|)) (* ?x188 |v0:9|))))
(let ((?x34 0))
(let ((?x56 (* ?x55 |v5:4|)))
(let (($x221 (<= (+ (+ (* (- 14) |v4:5|) (* 11 |v3:6|)) ?x56) ?x34)))
(let ((?x215 (- 16)))
(let ((?x214 (+ (+ (* 5 |v7:2|) (* (- 17) |v6:3|)) (* (- 9) |v3:6|))))
(let ((?x119 19))
(let ((?x10 (- 1)))
(let ((?x200 (* ?x10 |v3:6|)))
(let ((?x195 (+ (+ (* (- 10) |v1:8|) (* 9 |v9:0|)) (* 11 |v1:8|))))
(let (($x203 (or (<= ?x195 20) (<= (+ (+ (* ?x188 |v6:3|) (* 16 |v8:1|)) ?x200) ?x119))))
(let (($x189 (<= (+ (+ (* (- 4) |v8:1|) (* ?x10 |v5:4|)) (* ?x10 |v1:8|)) ?x188)))
(let (($x284 (and (and (or $x189 $x203) (or (<= ?x214 ?x215) (and $x221 (<= ?x225 ?x188)))) (and $x254 $x282))))
(let ((?x177 (+ (+ (* (- 12) |v1:8|) (* ?x82 |v3:6|)) (* 14 |v2:7|))))
(let ((?x169 (+ (+ (* 12 |v8:1|) (* 16 |v5:4|)) (* (- 5) |v8:1|))))
(let ((?x59 (- 15)))
(let ((?x163 (+ (+ (* 9 |v5:4|) (* ?x59 |v4:5|)) (* 8 |v4:5|))))
(let ((?x37 (- 4)))
(let ((?x154 (* ?x37 |v8:1|)))
(let (($x156 (<= (+ (+ (* (- 5) |v7:2|) (* (- 13) |v7:2|)) ?x154) 1)))
(let ((?x102 (- 17)))
(let ((?x103 (* ?x102 |v3:6|)))
(let ((?x138 (+ (+ (* 18 |v7:2|) (* ?x82 |v0:9|)) (* 13 |v3:6|))))
(let (($x145 (or (<= ?x138 1) (<= (+ (+ (* ?x34 |v4:5|) (* (- 8) |v6:3|)) ?x103) ?x55))))
(let ((?x127 9))
(let ((?x126 (+ (+ (* ?x102 |v5:4|) (* 14 |v5:4|)) (* 6 |v7:2|))))
(let ((?x98 16))
(let ((?x117 (* ?x98 |v8:1|)))
(let (($x129 (or (<= (+ (+ (* (- 7) |v7:2|) (* ?x37 |v5:4|)) ?x117) ?x119) (<= ?x126 ?x127))))
(let (($x181 (and (and $x129 $x145) (and (or $x156 (<= ?x163 ?x59)) (or (<= ?x169 ?x10) (<= ?x177 ?x34))))))
(let ((?x97 (+ (+ (* ?x34 |v4:5|) (* 13 |v8:1|)) (* 13 |v2:7|))))
(let (($x108 (and (<= ?x97 ?x98) (<= (+ (+ ?x103 (* ?x34 |v4:5|)) (* 4 |v4:5|)) ?x59))))
(let ((?x89 14))
(let ((?x88 (+ (+ (* 4 |v5:4|) (* ?x82 |v6:3|)) (* (- 18) |v4:5|))))
(let ((?x75 (- 8)))
(let ((?x74 (+ (+ (* 11 |v7:2|) (* (- 14) |v9:0|)) (* 13 |v5:4|))))
(let (($x63 (<= (+ (+ (* 12 |v8:1|) ?x56) (* ?x59 |v1:8|)) (- 11))))
(let (($x48 (<= (+ (+ (* ?x10 |v6:3|) (* ?x37 |v1:8|)) (* (- 6) |v2:7|)) ?x37)))
(let ((?x36 (+ (+ (* (- 10) |v7:2|) (* 7 |v4:5|)) (* ?x34 |v6:3|))))
(let ((?x22 11))
(let ((?x21 (+ (+ (* ?x10 |v6:3|) (* 13 |v7:2|)) (* 6 |v8:1|))))
(let (($x110 (or (or (and (<= ?x21 ?x22) (<= ?x36 ?x37)) (or $x48 $x63)) (or (or (<= ?x74 ?x75) (<= ?x88 ?x89)) $x108))))
(and (and $x110 $x181) $x284)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
)
)
)
)
)
)
)
)
)
(check-sat)
(exit)

