(set-info :smt-lib-version 2.6)
(set-logic LRA)
(set-info :source |
   Monniaux, David; Quantifier Elimination by Lazy Model Enumeration, CAV 2010
|)
(set-info :category "random")
; ./Mjollnir_examples/B1/formula_091.m
(set-info :status unsat)
(assert
 (forall ((|v9:0| Real) )(exists ((|v8:1| Real) )(forall ((|v7:2| Real) )(exists ((|v6:3| Real) )(forall ((|v5:4| Real) )(exists ((|v4:5| Real) )(forall ((|v3:6| Real) )(exists ((|v2:7| Real) )(forall ((|v1:8| Real) )(exists ((|v0:9| Real) )(let ((?x22 14))
(let ((?x247 (* 12 |v7:2|)))
(let (($x278 (<= (+ (+ (* (- 19) |v5:4|) (* 15 |v2:7|)) ?x247) ?x22)))
(let ((?x102 20))
(let (($x273 (<= (+ (+ (* (- 16) |v5:4|) ?x247) (* 7 |v3:6|)) ?x102)))
(let ((?x127 (- 19)))
(let (($x267 (<= (+ (+ (* 17 |v6:3|) (* ?x22 |v4:5|)) (* ?x127 |v2:7|)) ?x127)))
(let ((?x147 (- 8)))
(let ((?x260 (+ (+ (* (- 20) |v5:4|) (* 9 |v2:7|)) (* (- 1) |v3:6|))))
(let (($x251 (<= (+ (+ (* 4 |v6:3|) ?x247) (* 3 |v5:4|)) ?x22)))
(let ((?x14 (- 12)))
(let ((?x104 (* ?x102 |v5:4|)))
(let (($x245 (<= (+ (+ (* 15 |v0:9|) (* (- 9) |v5:4|)) ?x104) ?x14)))
(let (($x240 (<= (+ (+ (* (- 3) |v8:1|) ?x104) (* (- 10) |v7:2|)) ?x147)))
(let (($x281 (or (and $x240 (and $x245 $x251)) (or (or (<= ?x260 ?x147) $x267) (or $x273 $x278)))))
(let ((?x231 (+ (+ (* 11 |v4:5|) (* ?x147 |v5:4|)) (* 11 |v1:8|))))
(let ((?x226 (+ (+ (* 7 |v8:1|) (* 9 |v1:8|)) (* (- 5) |v8:1|))))
(let ((?x92 (- 7)))
(let (($x220 (<= (+ (+ (* (- 9) |v1:8|) (* (- 15) |v8:1|)) |v1:8|) ?x92)))
(let ((?x212 15))
(let ((?x211 (+ (+ (* 5 |v2:7|) (* 18 |v6:3|)) (* (- 17) |v7:2|))))
(let ((?x199 (+ (+ (* (- 6) |v3:6|) (* (- 5) |v1:8|)) (* (- 4) |v0:9|))))
(let ((?x37 (- 11)))
(let ((?x190 (+ (+ (* (- 18) |v8:1|) (* 16 |v2:7|)) (* 4 |v2:7|))))
(let ((?x67 9))
(let ((?x181 (+ (+ (* (- 2) |v4:5|) (* (- 2) |v3:6|)) (* (- 13) |v9:0|))))
(let ((?x20 (* (- 17) |v8:1|)))
(let (($x176 (<= (+ (+ (* 6 |v4:5|) (* (- 6) |v6:3|)) ?x20) (- 16))))
(let (($x203 (or (or $x176 (<= ?x181 ?x67)) (and (<= ?x190 ?x37) (<= ?x199 1)))))
(let (($x235 (and $x203 (and (and (<= ?x211 ?x212) $x220) (and (<= ?x226 ?x22) (<= ?x231 ?x14))))))
(let ((?x50 11))
(let ((?x165 (+ (+ (* 8 |v5:4|) (* 19 |v1:8|)) (* ?x14 |v5:4|))))
(let ((?x157 (+ (+ (* ?x92 |v7:2|) (* 16 |v3:6|)) (* (- 6) |v1:8|))))
(let ((?x78 (- 2)))
(let (($x150 (<= (+ (+ (* ?x50 |v4:5|) (* 16 |v0:9|)) (* ?x147 |v2:7|)) ?x78)))
(let ((?x99 (- 13)))
(let ((?x140 (+ (+ (* 5 |v6:3|) (* 17 |v4:5|)) (* 3 |v6:3|))))
(let ((?x126 (+ (+ (* (- 4) |v2:7|) (* (- 10) |v3:6|)) (* ?x78 |v5:4|))))
(let (($x118 (<= (+ (+ (* (- 3) |v1:8|) (* (- 18) |v7:2|)) |v1:8|) ?x50)))
(let (($x168 (and (or (and $x118 (<= ?x126 ?x127)) (<= ?x140 ?x99)) (or (and $x150 (<= ?x157 ?x147)) (<= ?x165 ?x50)))))
(let (($x103 (<= (+ (+ (* ?x92 |v1:8|) (* (- 18) |v1:8|)) (* ?x99 |v4:5|)) ?x102)))
(let (($x110 (and $x103 (<= (+ (+ ?x104 (* ?x14 |v1:8|)) (* ?x37 |v1:8|)) (- 10)))))
(let ((?x86 (+ (+ (* ?x78 |v8:1|) (* (- 3) |v2:7|)) (* 16 |v4:5|))))
(let (($x75 (<= (+ (+ (* ?x67 |v3:6|) (* ?x22 |v6:3|)) (* ?x50 |v9:0|)) 12)))
(let ((?x42 (- 10)))
(let ((?x61 (+ (+ (* (- 9) |v0:9|) (* (- 20) |v1:8|)) (* 0 |v8:1|))))
(let (($x51 (<= (+ (+ (* ?x42 |v0:9|) (* 0 |v3:6|)) (* ?x22 |v3:6|)) ?x50)))
(let ((?x36 (+ (+ (* 8 |v4:5|) (* 8 |v5:4|)) (* 7 |v0:9|))))
(let (($x39 (or (<= (+ (+ (* 16 |v9:0|) (* ?x14 |v3:6|)) ?x20) ?x22) (<= ?x36 ?x37))))
(let (($x112 (or (or $x39 (and $x51 (<= ?x61 ?x42))) (or (and $x75 (<= ?x86 6)) $x110))))
(and (and $x112 $x168) (and $x235 $x281)))))))))))))))))))))))))))))))))))))))))))))))))))))
)
)
)
)
)
)
)
)
)
)
(check-sat)
(exit)

