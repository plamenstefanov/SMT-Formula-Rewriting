(set-info :smt-lib-version 2.6)
(set-logic LRA)
(set-info :source |
   Monniaux, David; Quantifier Elimination by Lazy Model Enumeration, CAV 2010
|)
(set-info :category "random")
; ./Mjollnir_examples/B1/formula_134.m
(set-info :status unsat)
(assert
 (forall ((|v9:0| Real) )(exists ((|v8:1| Real) )(forall ((|v7:2| Real) )(exists ((|v6:3| Real) )(forall ((|v5:4| Real) )(exists ((|v4:5| Real) )(forall ((|v3:6| Real) )(exists ((|v2:7| Real) )(forall ((|v1:8| Real) )(exists ((|v0:9| Real) )(let ((?x30 (- 1)))
(let ((?x298 (+ (+ (* 3 |v2:7|) (* 19 |v8:1|)) (* 15 |v8:1|))))
(let ((?x143 9))
(let ((?x292 (+ (+ (* (- 2) |v0:9|) (* (- 17) |v4:5|)) (* (- 6) |v3:6|))))
(let ((?x19 (- 12)))
(let ((?x285 (+ (+ (* 5 |v5:4|) (* 13 |v9:0|)) (* (- 18) |v3:6|))))
(let ((?x280 (+ (+ (* (- 3) |v3:6|) (* (- 13) |v4:5|)) (* 2 |v8:1|))))
(let (($x301 (and (and (<= ?x280 10) (<= ?x285 ?x19)) (or (<= ?x292 ?x143) (<= ?x298 ?x30)))))
(let ((?x44 (- 15)))
(let ((?x273 (+ (+ (* 5 |v0:9|) (* 13 |v4:5|)) (* (- 14) |v9:0|))))
(let ((?x199 (- 20)))
(let ((?x267 (+ (+ (* (- 16) |v1:8|) (* ?x199 |v9:0|)) (* (- 14) |v6:3|))))
(let ((?x118 (- 3)))
(let (($x262 (<= (+ (+ (* (- 2) |v7:2|) (* ?x44 |v7:2|)) (* ?x19 |v5:4|)) ?x118)))
(let ((?x14 14))
(let ((?x255 (+ (+ (* 7 |v0:9|) (* 5 |v2:7|)) (* (- 8) |v2:7|))))
(let (($x302 (or (and (and (<= ?x255 ?x14) $x262) (and (<= ?x267 ?x199) (<= ?x273 ?x44))) $x301)))
(let ((?x166 (- 8)))
(let ((?x239 (+ (+ (* ?x14 |v4:5|) (* 4 |v9:0|)) (* (- 2) |v1:8|))))
(let (($x246 (and (<= ?x239 0) (<= (+ (+ (* (- 9) |v0:9|) (* ?x44 |v9:0|)) |v3:6|) ?x166))))
(let (($x232 (<= (+ (+ (* 2 |v0:9|) (* 16 |v2:7|)) |v0:9|) 7)))
(let ((?x22 (- 19)))
(let (($x225 (<= (+ (+ |v6:3| (* 20 |v2:7|)) (* (- 7) |v0:9|)) ?x22)))
(let ((?x76 (- 18)))
(let ((?x217 (+ (+ (* 18 |v9:0|) (* ?x19 |v8:1|)) (* (- 9) |v5:4|))))
(let ((?x10 17))
(let ((?x212 (+ (+ (* (- 2) |v9:0|) (* ?x118 |v1:8|)) (* 19 |v9:0|))))
(let ((?x203 (+ (+ (* (- 16) |v7:2|) (* ?x199 |v4:5|)) (* 6 |v1:8|))))
(let ((?x67 18))
(let (($x205 (or (<= (+ (+ (* (- 14) |v3:6|) |v7:2|) (* ?x22 |v2:7|)) ?x67) (<= ?x203 ?x143))))
(let (($x248 (and (and $x205 (or (<= ?x212 ?x10) (<= ?x217 ?x76))) (or (and $x225 $x232) $x246))))
(let ((?x169 (- 14)))
(let ((?x186 (+ (+ (* (- 17) |v2:7|) (* ?x44 |v2:7|)) (* 8 |v0:9|))))
(let ((?x176 (+ (+ (* (- 6) |v1:8|) (* 20 |v3:6|)) (* ?x30 |v6:3|))))
(let (($x170 (<= (+ (+ (* ?x10 |v9:0|) (* 20 |v4:5|)) (* ?x166 |v6:3|)) ?x169)))
(let ((?x157 (+ (+ (* (- 10) |v6:3|) (* (- 5) |v7:2|)) (* (- 16) |v8:1|))))
(let (($x189 (and (or (<= ?x157 ?x30) $x170) (and (<= ?x176 (- 13)) (<= ?x186 ?x169)))))
(let ((?x103 16))
(let ((?x140 (+ (+ (* (- 6) |v7:2|) (* 11 |v3:6|)) (* ?x10 |v6:3|))))
(let (($x149 (and (<= ?x140 ?x103) (<= (+ (+ (* ?x143 |v3:6|) (* ?x19 |v8:1|)) (* ?x143 |v3:6|)) ?x118))))
(let ((?x79 (- 10)))
(let ((?x133 (+ (+ (* (- 6) |v9:0|) (* (- 2) |v8:1|)) (* ?x19 |v7:2|))))
(let (($x123 (<= (+ (+ (* (- 7) |v1:8|) (* ?x118 |v5:4|)) (* ?x76 |v5:4|)) ?x44)))
(let ((?x109 (+ (+ (* 4 |v7:2|) (* ?x103 |v3:6|)) (* (- 7) |v4:5|))))
(let ((?x51 2))
(let ((?x97 (* 13 |v9:0|)))
(let (($x99 (<= (+ (+ (* 6 |v9:0|) (* 11 |v0:9|)) ?x97) ?x51)))
(let (($x86 (<= (+ (+ (* ?x76 |v0:9|) (* ?x79 |v9:0|)) (* 12 |v0:9|)) ?x19)))
(let (($x74 (<= (+ (+ (* ?x67 |v7:2|) (* ?x44 |v9:0|)) (* ?x19 |v6:3|)) 15)))
(let (($x62 (and (<= (+ (+ (* ?x44 |v6:3|) (* (- 13) |v4:5|)) |v4:5|) ?x51) (<= (+ (+ |v9:0| |v3:6|) (* (- 16) |v1:8|)) (- 11)))))
(let ((?x38 (- 9)))
(let ((?x37 (+ (+ (* 4 |v1:8|) (* ?x30 |v1:8|)) (* 3 |v9:0|))))
(let (($x40 (and (<= (+ (+ (* ?x10 |v4:5|) (* ?x14 |v0:9|)) (* ?x19 |v2:7|)) ?x22) (<= ?x37 ?x38))))
(let (($x114 (or (and $x40 $x62) (or (and $x74 $x86) (or $x99 (<= ?x109 10))))))
(and (and $x114 (and (or (and $x123 (<= ?x133 ?x79)) $x149) $x189)) (and $x248 $x302)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
)
)
)
)
)
)
)
)
)
(check-sat)
(exit)

