(set-info :smt-lib-version 2.6)
(set-logic LRA)
(set-info :source |
   Monniaux, David; Quantifier Elimination by Lazy Model Enumeration, CAV 2010
|)
(set-info :category "random")
; ./Mjollnir_examples/B1/formula_136.m
(set-info :status unsat)
(assert
 (forall ((|v9:0| Real) )(exists ((|v8:1| Real) )(forall ((|v7:2| Real) )(exists ((|v6:3| Real) )(forall ((|v5:4| Real) )(exists ((|v4:5| Real) )(forall ((|v3:6| Real) )(exists ((|v2:7| Real) )(forall ((|v1:8| Real) )(exists ((|v0:9| Real) )(let ((?x277 (+ (+ (* 9 |v8:1|) (* 0 |v2:7|)) (* 18 |v0:9|))))
(let ((?x108 7))
(let (($x279 (and (<= (+ (+ |v5:4| (* 17 |v1:8|)) (* ?x108 |v9:0|)) ?x108) (<= ?x277 12))))
(let ((?x80 20))
(let ((?x265 (+ (+ (* (- 14) |v4:5|) (* (- 7) |v8:1|)) (* 0 |v4:5|))))
(let ((?x168 (- 10)))
(let ((?x184 (* ?x168 |v3:6|)))
(let (($x260 (<= (+ (+ (* 9 |v5:4|) (* (- 15) |v0:9|)) ?x184) ?x80)))
(let ((?x121 18))
(let ((?x253 (+ (+ (* 0 |v3:6|) (* 10 |v0:9|)) (* 5 |v0:9|))))
(let ((?x85 (- 9)))
(let ((?x246 (+ (+ (* 9 |v2:7|) (* (- 5) |v5:4|)) (* (- 17) |v9:0|))))
(let ((?x92 19))
(let ((?x36 (- 3)))
(let ((?x47 (* ?x36 |v9:0|)))
(let (($x241 (<= (+ (+ (* 8 |v0:9|) (* (- 4) |v2:7|)) ?x47) ?x92)))
(let (($x281 (and (and $x241 (or (<= ?x246 ?x85) (<= ?x253 ?x121))) (and (or $x260 (<= ?x265 ?x80)) $x279))))
(let ((?x66 2))
(let ((?x232 (+ (+ (* 6 |v8:1|) (* (- 18) |v2:7|)) (* ?x85 |v7:2|))))
(let ((?x224 (+ (+ (* 11 |v0:9|) (* (- 20) |v7:2|)) (* ?x108 |v1:8|))))
(let ((?x217 (+ (+ (* (- 7) |v0:9|) (* 14 |v9:0|)) (* 10 |v2:7|))))
(let ((?x208 (+ (+ (* (- 13) |v6:3|) (* ?x92 |v6:3|)) (* (- 15) |v8:1|))))
(let ((?x203 (+ (+ (* 15 |v3:6|) (* ?x168 |v2:7|)) (* (- 18) |v0:9|))))
(let ((?x162 (- 17)))
(let ((?x196 (* (- 15) |v0:9|)))
(let (($x198 (<= (+ (+ (* 15 |v6:3|) (* (- 19) |v2:7|)) ?x196) ?x162)))
(let ((?x70 (- 20)))
(let (($x188 (<= (+ (+ (* (- 4) |v7:2|) ?x184) (* 11 |v9:0|)) ?x70)))
(let (($x236 (and (or (and $x188 $x198) (or (<= ?x203 ?x85) (<= ?x208 ?x66))) (and (<= ?x217 16) (or (<= ?x224 ?x168) (<= ?x232 ?x66))))))
(let ((?x175 (+ (+ (* ?x168 |v2:7|) (* (- 7) |v1:8|)) (* (- 13) |v7:2|))))
(let ((?x22 (- 18)))
(let ((?x59 (* ?x22 |v6:3|)))
(let (($x177 (and (<= (+ (+ (* 12 |v7:2|) (* ?x162 |v0:9|)) ?x59) ?x36) (<= ?x175 (- 2)))))
(let ((?x126 11))
(let ((?x156 (+ (+ (* 8 |v2:7|) (* 13 |v3:6|)) (* ?x70 |v6:3|))))
(let ((?x141 13))
(let ((?x148 (+ (+ (* ?x141 |v4:5|) (* 17 |v0:9|)) (* 4 |v2:7|))))
(let ((?x138 (+ (+ (* 10 |v0:9|) (* (- 11) |v9:0|)) (* 15 |v0:9|))))
(let ((?x131 (+ (+ (* ?x126 |v5:4|) (* 15 |v1:8|)) (* (- 11) |v3:6|))))
(let ((?x123 (+ (+ (* (- 1) |v1:8|) (* 3 |v3:6|)) (* ?x121 |v5:4|))))
(let (($x151 (or (or (<= ?x123 ?x108) (<= ?x131 ?x108)) (or (<= ?x138 ?x80) (<= ?x148 ?x141)))))
(let (($x111 (<= (+ (+ (* ?x92 |v4:5|) (* 5 |v1:8|)) (* ?x108 |v6:3|)) ?x80)))
(let ((?x40 15))
(let ((?x100 (+ (+ (* ?x92 |v6:3|) (* 4 |v5:4|)) (* (- 13) |v2:7|))))
(let (($x89 (<= (+ (+ (* (- 11) |v4:5|) (* ?x80 |v8:1|)) (* ?x85 |v1:8|)) (- 2))))
(let ((?x10 (- 14)))
(let (($x73 (<= (+ (+ (* (- 12) |v4:5|) (* ?x66 |v3:6|)) (* ?x70 |v9:0|)) ?x10)))
(let ((?x61 10))
(let (($x62 (<= (+ (+ (* 14 |v3:6|) (* (- 5) |v7:2|)) ?x59) ?x61)))
(let (($x63 (or (<= (+ (+ (* ?x40 |v9:0|) (* 3 |v0:9|)) ?x47) ?x22) $x62)))
(let ((?x35 (+ (+ (* 8 |v5:4|) (* ?x22 |v7:2|)) (* 9 |v9:0|))))
(let ((?x21 (+ (+ (* ?x10 |v7:2|) (* (- 12) |v4:5|)) (* 4 |v3:6|))))
(let (($x114 (and (and (or (<= ?x21 ?x22) (<= ?x35 ?x36)) $x63) (and (or $x73 $x89) (and (<= ?x100 ?x40) $x111)))))
(or (and $x114 (or $x151 (and (<= ?x156 ?x126) $x177))) (and $x236 $x281))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
)
)
)
)
)
)
)
)
)
(check-sat)
(exit)

