(set-info :smt-lib-version 2.6)
(set-logic LRA)
(set-info :source |
   Monniaux, David; Quantifier Elimination by Lazy Model Enumeration, CAV 2010
|)
(set-info :category "random")
; ./Mjollnir_examples/B1/formula_038.m
(set-info :status unsat)
(assert
 (forall ((|v9:0| Real) )(exists ((|v8:1| Real) )(forall ((|v7:2| Real) )(exists ((|v6:3| Real) )(forall ((|v5:4| Real) )(exists ((|v4:5| Real) )(forall ((|v3:6| Real) )(exists ((|v2:7| Real) )(forall ((|v1:8| Real) )(exists ((|v0:9| Real) )(let ((?x55 3))
(let ((?x280 (+ (+ (* 12 |v8:1|) (* 14 |v3:6|)) (* 17 |v9:0|))))
(let ((?x273 (+ (+ (* (- 18) |v6:3|) (* 11 |v0:9|)) (* (- 8) |v8:1|))))
(let ((?x148 (- 5)))
(let ((?x264 (+ (+ (* 4 |v4:5|) (* 10 |v6:3|)) (* (- 15) |v8:1|))))
(let ((?x79 (- 11)))
(let ((?x258 (+ (+ (* (- 7) |v7:2|) (* (- 4) |v3:6|)) (* 14 |v8:1|))))
(let (($x283 (and (or (<= ?x258 ?x79) (<= ?x264 ?x148)) (or (<= ?x273 1) (<= ?x280 ?x55)))))
(let ((?x201 16))
(let ((?x250 (+ (+ (* ?x55 |v3:6|) (* 18 |v3:6|)) (* (- 10) |v8:1|))))
(let ((?x184 12))
(let ((?x242 (+ (+ (* ?x55 |v7:2|) (* (- 9) |v7:2|)) (* 19 |v9:0|))))
(let ((?x234 (+ (+ (* 6 |v7:2|) (* 15 |v8:1|)) (* (- 10) |v6:3|))))
(let ((?x99 (- 7)))
(let ((?x172 (* (- 20) |v4:5|)))
(let (($x226 (<= (+ (+ (* (- 3) |v4:5|) (* (- 4) |v3:6|)) ?x172) ?x99)))
(let (($x253 (or (and $x226 (<= ?x234 7)) (or (<= ?x242 ?x184) (<= ?x250 ?x201)))))
(let ((?x212 (+ (+ (* (- 16) |v9:0|) (* 2 |v2:7|)) (* (- 13) |v1:8|))))
(let (($x219 (or (<= ?x212 ?x184) (<= (+ (+ (* ?x201 |v6:3|) (* ?x79 |v6:3|)) |v0:9|) 20))))
(let (($x207 (<= (+ (+ (* ?x201 |v8:1|) (* ?x148 |v4:5|)) (* 4 |v1:8|)) ?x79)))
(let (($x199 (<= (+ (+ (* ?x79 |v2:7|) (* ?x184 |v9:0|)) (* (- 17) |v1:8|)) ?x99)))
(let ((?x190 (+ (+ (* (- 18) |v6:3|) (* 11 |v7:2|)) (* 19 |v2:7|))))
(let ((?x183 (+ (+ (* 0 |v5:4|) (* 13 |v6:3|)) (* (- 3) |v3:6|))))
(let ((?x108 (- 10)))
(let (($x176 (<= (+ (+ (* 2 |v9:0|) ?x172) (* (- 12) |v9:0|)) ?x108)))
(let ((?x25 (- 6)))
(let ((?x40 (* ?x25 |v7:2|)))
(let (($x168 (<= (+ (+ (* (- 15) |v9:0|) (* (- 19) |v5:4|)) ?x40) ?x148)))
(let (($x221 (and (or (and $x168 $x176) (and (<= ?x183 ?x184) (<= ?x190 ?x55))) (and (and $x199 $x207) $x219))))
(let ((?x133 10))
(let ((?x156 (+ (+ (* 0 |v3:6|) (* (- 16) |v9:0|)) (* (- 13) |v6:3|))))
(let ((?x124 (- 16)))
(let ((?x150 (+ (+ (* 13 |v9:0|) (* 5 |v9:0|)) (* ?x148 |v9:0|))))
(let ((?x139 (- 13)))
(let (($x140 (<= (+ (+ (* ?x133 |v7:2|) (* ?x79 |v5:4|)) (* 17 |v7:2|)) ?x139)))
(let ((?x38 (- 15)))
(let ((?x129 (+ (+ (* (- 9) |v5:4|) (* ?x124 |v6:3|)) (* 0 |v9:0|))))
(let ((?x115 4))
(let (($x116 (<= (+ (+ (* ?x55 |v5:4|) (* ?x108 |v1:8|)) (* 19 |v3:6|)) ?x115)))
(let ((?x89 (- 4)))
(let ((?x104 (+ (+ (* ?x99 |v7:2|) (* (- 12) |v3:6|)) (* (- 18) |v3:6|))))
(let ((?x95 (+ (+ (* 20 |v2:7|) (* ?x89 |v4:5|)) (* 17 |v4:5|))))
(let ((?x86 (+ (+ (* ?x79 |v8:1|) (* (- 14) |v3:6|)) (* 5 |v0:9|))))
(let (($x118 (and (or (<= ?x86 (- 14)) (<= ?x95 (- 1))) (or (<= ?x104 ?x89) $x116))))
(let (($x160 (and $x118 (or (or (<= ?x129 ?x38) $x140) (and (<= ?x150 ?x124) (<= ?x156 ?x133))))))
(let ((?x73 (- 3)))
(let ((?x72 (+ (+ (* 0 |v7:2|) (* (- 17) |v4:5|)) (* 11 |v2:7|))))
(let ((?x61 11))
(let ((?x60 (+ (+ (* 2 |v5:4|) (* ?x55 |v5:4|)) (* 6 |v8:1|))))
(let ((?x46 6))
(let ((?x19 20))
(let ((?x32 (* ?x19 |v2:7|)))
(let (($x48 (and (<= (+ (+ (* ?x25 |v3:6|) (* (- 14) |v3:6|)) ?x32) ?x25) (<= (+ (+ (* ?x38 |v7:2|) ?x40) (* (- 12) |v2:7|)) ?x46))))
(let ((?x22 (- 18)))
(let ((?x21 (+ (+ (* (- 2) |v1:8|) (* (- 1) |v4:5|)) (* ?x19 |v3:6|))))
(let (($x161 (and (and (<= ?x21 ?x22) (and $x48 (and (<= ?x60 ?x61) (<= ?x72 ?x73)))) $x160)))
(and $x161 (or $x221 (or $x253 $x283))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
)
)
)
)
)
)
)
)
)
(check-sat)
(exit)

