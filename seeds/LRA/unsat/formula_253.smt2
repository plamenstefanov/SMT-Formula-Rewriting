(set-info :smt-lib-version 2.6)
(set-logic LRA)
(set-info :source |
   Monniaux, David; Quantifier Elimination by Lazy Model Enumeration, CAV 2010
|)
(set-info :category "random")
; ./Mjollnir_examples/B1/formula_253.m
(set-info :status unsat)
(assert
 (forall ((|v9:0| Real) )(exists ((|v8:1| Real) )(forall ((|v7:2| Real) )(exists ((|v6:3| Real) )(forall ((|v5:4| Real) )(exists ((|v4:5| Real) )(forall ((|v3:6| Real) )(exists ((|v2:7| Real) )(forall ((|v1:8| Real) )(exists ((|v0:9| Real) )(let ((?x54 10))
(let ((?x279 (+ (+ (* 20 |v5:4|) (* (- 9) |v9:0|)) (* (- 6) |v8:1|))))
(let ((?x72 (- 20)))
(let ((?x273 (+ (+ (* (- 9) |v6:3|) (* 17 |v4:5|)) (* (- 17) |v1:8|))))
(let ((?x9 (- 18)))
(let ((?x266 (+ (+ (* (- 7) |v1:8|) (* 5 |v4:5|)) (* ?x54 |v5:4|))))
(let ((?x49 3))
(let ((?x262 (+ (+ (* 4 |v8:1|) (* 20 |v6:3|)) (* 19 |v9:0|))))
(let (($x282 (or (or (<= ?x262 ?x49) (<= ?x266 ?x9)) (or (<= ?x273 ?x72) (<= ?x279 ?x54)))))
(let ((?x98 (- 8)))
(let ((?x256 (+ (+ (* 20 |v6:3|) (* ?x49 |v2:7|)) (* (- 15) |v4:5|))))
(let (($x248 (<= (+ (+ (* ?x72 |v6:3|) (* ?x98 |v1:8|)) (* ?x54 |v6:3|)) (- 14))))
(let ((?x241 (+ (+ (* (- 19) |v7:2|) (* ?x49 |v4:5|)) (* (- 13) |v8:1|))))
(let (($x234 (<= (+ (+ (* 15 |v9:0|) (* (- 19) |v8:1|)) |v4:5|) (- 16))))
(let ((?x162 6))
(let ((?x226 (+ (+ (* (- 5) |v5:4|) (* ?x54 |v4:5|)) (* 17 |v0:9|))))
(let ((?x214 (+ (+ (* 14 |v4:5|) (* 18 |v2:7|)) (* 16 |v8:1|))))
(let (($x222 (or (<= ?x214 0) (<= (+ (+ (* ?x9 |v4:5|) |v6:3|) (* 16 |v5:4|)) ?x49))))
(let ((?x40 (- 1)))
(let ((?x183 (* 11 |v1:8|)))
(let ((?x59 (- 6)))
(let ((?x195 (+ (+ (* ?x98 |v2:7|) (* (- 12) |v6:3|)) (* (- 17) |v2:7|))))
(let (($x201 (and (<= ?x195 ?x59) (<= (+ (+ (* (- 10) |v6:3|) (* ?x40 |v9:0|)) ?x183) ?x40))))
(let (($x189 (<= (+ (+ ?x183 (* ?x40 |v9:0|)) (* (- 3) |v9:0|)) 12)))
(let ((?x181 (+ (+ (* 13 |v2:7|) (* (- 7) |v8:1|)) (* ?x162 |v4:5|))))
(let (($x237 (and (or (and (<= ?x181 ?x162) $x189) $x201) (and $x222 (or (<= ?x226 ?x162) $x234)))))
(let (($x284 (or $x237 (or (or (and (<= ?x241 7) $x248) (<= ?x256 ?x98)) $x282))))
(let ((?x102 19))
(let ((?x169 (+ (+ (* ?x162 |v9:0|) (* (- 19) |v7:2|)) (* 11 |v0:9|))))
(let ((?x158 (+ (+ (* 2 |v2:7|) (* 12 |v9:0|)) (* ?x49 |v5:4|))))
(let ((?x147 (+ (+ (* 2 |v6:3|) (* ?x98 |v1:8|)) (* (- 17) |v0:9|))))
(let ((?x124 17))
(let ((?x136 (+ (+ (* 9 |v5:4|) (* (- 2) |v9:0|)) (* 7 |v9:0|))))
(let (($x172 (or (and (<= ?x136 ?x124) (<= ?x147 4)) (and (<= ?x158 (- 10)) (<= ?x169 ?x102)))))
(let ((?x123 (+ (+ (* ?x102 |v5:4|) (* (- 7) |v4:5|)) (* (- 13) |v9:0|))))
(let ((?x115 (+ (+ (* (- 9) |v1:8|) (* (- 7) |v6:3|)) (* 8 |v6:3|))))
(let ((?x82 (- 12)))
(let (($x107 (<= (+ (+ (* (- 15) |v3:6|) (* ?x102 |v2:7|)) (* ?x54 |v3:6|)) ?x82)))
(let ((?x97 (+ (+ (* (- 7) |v5:4|) (* ?x82 |v3:6|)) (* 9 |v8:1|))))
(let (($x173 (and (and (or (<= ?x97 ?x98) $x107) (and (<= ?x115 ?x72) (<= ?x123 ?x124))) $x172)))
(let ((?x84 (+ (+ (* 5 |v4:5|) (* (- 7) |v4:5|)) (* ?x82 |v5:4|))))
(let ((?x74 (+ (+ (* (- 7) |v1:8|) (* (- 19) |v0:9|)) (* ?x72 |v7:2|))))
(let ((?x48 (+ (+ (* ?x40 |v9:0|) (* (- 11) |v5:4|)) (* (- 9) |v4:5|))))
(let (($x61 (or (<= ?x48 ?x49) (<= (+ (+ (* ?x49 |v3:6|) (* ?x54 |v6:3|)) (* ?x40 |v7:2|)) ?x59))))
(let ((?x24 (- 11)))
(let ((?x33 (* (- 5) |v5:4|)))
(let ((?x20 (+ (+ (* ?x9 |v2:7|) (* (- 4) |v7:2|)) (* (- 15) |v6:3|))))
(let (($x36 (and (<= ?x20 ?x9) (<= (+ (+ (* ?x24 |v3:6|) (* (- 16) |v2:7|)) ?x33) ?x24))))
(and (and (or $x36 (and $x61 (or (<= ?x74 ?x59) (<= ?x84 ?x54)))) $x173) $x284))))))))))))))))))))))))))))))))))))))))))))))))))
)
)
)
)
)
)
)
)
)
)
(check-sat)
(exit)

