(set-info :smt-lib-version 2.6)
(set-logic LRA)
(set-info :source |
   Monniaux, David; Quantifier Elimination by Lazy Model Enumeration, CAV 2010
|)
(set-info :category "random")
; ./Mjollnir_examples/B1/formula_198.m
(set-info :status unsat)
(assert
 (forall ((|v9:0| Real) )(exists ((|v8:1| Real) )(forall ((|v7:2| Real) )(exists ((|v6:3| Real) )(forall ((|v5:4| Real) )(exists ((|v4:5| Real) )(forall ((|v3:6| Real) )(exists ((|v2:7| Real) )(forall ((|v1:8| Real) )(exists ((|v0:9| Real) )(let ((?x63 (- 16)))
(let ((?x274 (+ (+ (* (- 2) |v4:5|) (* (- 14) |v5:4|)) (* 14 |v3:6|))))
(let ((?x269 (+ (+ (* 6 |v9:0|) (* 11 |v5:4|)) (* 11 |v9:0|))))
(let ((?x164 18))
(let ((?x263 (+ (+ (* (- 13) |v6:3|) (* (- 4) |v1:8|)) (* 20 |v8:1|))))
(let (($x259 (<= (+ (+ (* ?x63 |v4:5|) |v7:2|) (* (- 5) |v4:5|)) 9)))
(let (($x277 (and (or $x259 (<= ?x263 ?x164)) (and (<= ?x269 19) (<= ?x274 ?x63)))))
(let ((?x50 (- 20)))
(let ((?x252 (+ (+ (* (- 17) |v5:4|) (* (- 4) |v4:5|)) (* (- 17) |v8:1|))))
(let ((?x150 (- 8)))
(let ((?x246 (+ (+ (* 10 |v3:6|) (* (- 13) |v6:3|)) (* (- 18) |v1:8|))))
(let ((?x18 6))
(let ((?x238 (+ (+ (* 12 |v7:2|) (* ?x50 |v6:3|)) (* (- 12) |v3:6|))))
(let ((?x102 (- 4)))
(let ((?x232 (+ (+ (* 11 |v5:4|) (* (- 1) |v8:1|)) (* 0 |v2:7|))))
(let ((?x184 (- 5)))
(let ((?x225 (+ (+ (* (- 9) |v2:7|) (* 8 |v6:3|)) (* 2 |v7:2|))))
(let ((?x21 (- 12)))
(let ((?x120 (* (- 19) |v2:7|)))
(let (($x220 (<= (+ (+ (* (- 19) |v0:9|) (* (- 7) |v2:7|)) ?x120) ?x21)))
(let ((?x206 (- 18)))
(let ((?x212 (+ (+ (* (- 6) |v2:7|) (* ?x206 |v9:0|)) (* 11 |v4:5|))))
(let ((?x202 (+ (+ (* ?x164 |v0:9|) (* 2 |v1:8|)) (* (- 1) |v2:7|))))
(let ((?x106 10))
(let ((?x43 (- 6)))
(let ((?x116 (* ?x43 |v6:3|)))
(let (($x196 (<= (+ (+ (* 13 |v6:3|) (* (- 2) |v8:1|)) ?x116) ?x106)))
(let ((?x153 (- 2)))
(let (($x191 (<= (+ (+ (* ?x63 |v9:0|) (* ?x184 |v6:3|)) (* 8 |v7:2|)) ?x153)))
(let (($x242 (and (or (and $x191 $x196) (and (<= ?x202 ?x150) (<= ?x212 ?x206))) (and (and $x220 (<= ?x225 ?x184)) (or (<= ?x232 ?x102) (<= ?x238 ?x18))))))
(let ((?x176 (+ (+ (* ?x106 |v3:6|) (* (- 17) |v7:2|)) (* (- 10) |v2:7|))))
(let ((?x81 15))
(let (($x169 (<= (+ (+ (* ?x63 |v5:4|) (* ?x164 |v5:4|)) (* 3 |v0:9|)) ?x81)))
(let ((?x109 (- 14)))
(let (($x160 (<= (+ (+ (* ?x150 |v0:9|) (* ?x153 |v4:5|)) (* 19 |v8:1|)) ?x109)))
(let ((?x15 (* 5 |v8:1|)))
(let (($x161 (and (<= (+ (+ (* (- 1) |v5:4|) (* ?x102 |v8:1|)) ?x15) ?x43) $x160)))
(let ((?x139 (+ (+ (* 3 |v1:8|) (* ?x109 |v3:6|)) (* 2 |v3:6|))))
(let (($x132 (<= (+ (+ (* ?x102 |v0:9|) (* (- 11) |v6:3|)) (* ?x106 |v2:7|)) (- 9))))
(let (($x110 (<= (+ (+ (* (- 7) |v6:3|) (* ?x102 |v9:0|)) (* ?x106 |v9:0|)) ?x109)))
(let (($x124 (and $x110 (<= (+ (+ (* 7 |v4:5|) ?x116) ?x120) 20))))
(let (($x180 (or (or $x124 (or $x132 (<= ?x139 9))) (and $x161 (or $x169 (<= ?x176 7))))))
(let ((?x25 13))
(let (($x94 (<= (+ (+ (* ?x81 |v7:2|) (* ?x18 |v8:1|)) (* (- 1) |v0:9|)) ?x25)))
(let ((?x77 (- 10)))
(let ((?x37 2))
(let ((?x73 (+ (+ (* ?x50 |v9:0|) (* (- 15) |v5:4|)) (* 12 |v2:7|))))
(let (($x87 (and (<= ?x73 ?x37) (<= (+ (+ (* ?x77 |v7:2|) (* ?x81 |v6:3|)) (* ?x50 |v7:2|)) ?x77))))
(let ((?x62 (+ (+ (* 12 |v1:8|) (* (- 13) |v9:0|)) (* 0 |v5:4|))))
(let (($x51 (<= (+ (+ (* ?x25 |v9:0|) (* ?x43 |v0:9|)) (* (- 11) |v2:7|)) ?x50)))
(let ((?x36 (+ (+ (* ?x25 |v9:0|) (* 14 |v2:7|)) (* 3 |v5:4|))))
(let (($x39 (or (<= (+ (+ (* 0 |v9:0|) ?x15) (* ?x18 |v8:1|)) ?x21) (<= ?x36 ?x37))))
(let (($x181 (and (and (and $x39 (and $x51 (<= ?x62 ?x63))) (and $x87 $x94)) $x180)))
(or $x181 (and $x242 (or (or (<= ?x246 ?x150) (<= ?x252 ?x50)) $x277)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
)
)
)
)
)
)
)
)
)
(check-sat)
(exit)

