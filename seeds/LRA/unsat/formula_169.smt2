(set-info :smt-lib-version 2.6)
(set-logic LRA)
(set-info :source |
   Monniaux, David; Quantifier Elimination by Lazy Model Enumeration, CAV 2010
|)
(set-info :category "random")
; ./Mjollnir_examples/B1/formula_169.m
(set-info :status unknown)
(assert
 (forall ((|v9:0| Real) )(exists ((|v8:1| Real) )(forall ((|v7:2| Real) )(exists ((|v6:3| Real) )(forall ((|v5:4| Real) )(exists ((|v4:5| Real) )(forall ((|v3:6| Real) )(exists ((|v2:7| Real) )(forall ((|v1:8| Real) )(exists ((|v0:9| Real) )(let ((?x64 6))
(let ((?x291 (+ (+ (* (- 10) |v7:2|) (* 17 |v4:5|)) (* (- 5) |v7:2|))))
(let ((?x152 14))
(let ((?x283 (+ (+ (* (- 11) |v5:4|) (* 13 |v3:6|)) (* (- 11) |v8:1|))))
(let ((?x60 (- 7)))
(let ((?x185 (* 2 |v6:3|)))
(let (($x277 (<= (+ (+ (* 5 |v5:4|) (* (- 3) |v0:9|)) ?x185) ?x60)))
(let ((?x127 10))
(let ((?x271 (+ (+ (* ?x60 |v0:9|) (* (- 20) |v5:4|)) (* 16 |v1:8|))))
(let ((?x10 (- 12)))
(let ((?x255 (* 7 |v9:0|)))
(let (($x262 (<= (+ (+ (* (- 2) |v4:5|) (* 15 |v9:0|)) ?x255) ?x10)))
(let ((?x30 5))
(let (($x263 (and (<= (+ (+ (* 17 |v9:0|) (* ?x60 |v7:2|)) ?x255) ?x30) $x262)))
(let ((?x15 (* 3 |v8:1|)))
(let (($x251 (<= (+ (+ (* 15 |v5:4|) (* (- 13) |v8:1|)) ?x15) 12)))
(let ((?x244 (+ (+ (* 15 |v6:3|) (* 4 |v5:4|)) (* (- 2) |v5:4|))))
(let (($x295 (or (or (and (<= ?x244 12) $x251) $x263) (or (or (<= ?x271 ?x127) $x277) (and (<= ?x283 ?x152) (<= ?x291 ?x64))))))
(let ((?x95 18))
(let ((?x232 (+ (+ (* (- 14) |v5:4|) (* ?x30 |v2:7|)) (* 4 |v0:9|))))
(let ((?x51 8))
(let (($x225 (<= (+ (+ (* ?x51 |v8:1|) (* (- 17) |v7:2|)) (* ?x127 |v8:1|)) ?x51)))
(let ((?x27 (- 1)))
(let ((?x218 (+ (+ (* 13 |v9:0|) (* 9 |v4:5|)) (* 7 |v5:4|))))
(let ((?x208 (+ (+ (* (- 15) |v7:2|) (* (- 9) |v9:0|)) (* ?x10 |v8:1|))))
(let ((?x202 (+ (+ (* (- 16) |v2:7|) (* (- 6) |v0:9|)) (* ?x95 |v3:6|))))
(let ((?x196 (+ (+ (* (- 9) |v7:2|) (* 17 |v5:4|)) (* (- 17) |v1:8|))))
(let (($x192 (<= (+ (+ ?x185 (* (- 20) |v4:5|)) (* 17 |v5:4|)) (- 18))))
(let (($x211 (and (or $x192 (<= ?x196 ?x152)) (and (<= ?x202 ?x60) (<= ?x208 2)))))
(let ((?x175 (+ (+ (* (- 11) |v7:2|) (* 19 |v9:0|)) (* ?x152 |v7:2|))))
(let ((?x106 13))
(let (($x167 (<= (+ (+ (* ?x60 |v7:2|) (* 11 |v4:5|)) (* ?x127 |v9:0|)) ?x106)))
(let ((?x38 15))
(let (($x160 (<= (+ (+ |v9:0| (* (- 6) |v9:0|)) (* (- 10) |v8:1|)) ?x38)))
(let ((?x151 (+ (+ (* (- 20) |v1:8|) (* 20 |v6:3|)) (* 20 |v2:7|))))
(let ((?x141 (+ (+ (* (- 16) |v2:7|) (* ?x27 |v3:6|)) (* (- 9) |v1:8|))))
(let ((?x131 (+ (+ (* (- 15) |v9:0|) (* ?x127 |v4:5|)) (* (- 3) |v1:8|))))
(let ((?x122 (+ (+ (* (- 13) |v9:0|) (* (- 3) |v3:6|)) (* ?x10 |v0:9|))))
(let (($x143 (and (or (<= ?x122 (- 8)) (<= ?x131 19)) (<= ?x141 ?x30))))
(let (($x180 (and $x143 (or (and (<= ?x151 ?x152) $x160) (or $x167 (<= ?x175 9))))))
(let (($x110 (<= (+ (+ (* (- 16) |v1:8|) (* ?x51 |v2:7|)) (* ?x106 |v2:7|)) 0)))
(let (($x111 (and (<= (+ (+ (* ?x64 |v3:6|) (* ?x27 |v6:3|)) (* ?x95 |v4:5|)) ?x51) $x110)))
(let ((?x65 (* ?x64 |v1:8|)))
(let (($x89 (<= (+ (+ (* 4 |v6:3|) (* (- 17) |v0:9|)) ?x65) 1)))
(let ((?x80 (+ (+ (* 17 |v3:6|) (* ?x64 |v7:2|)) (* (- 4) |v6:3|))))
(let ((?x67 (- 6)))
(let ((?x54 4))
(let ((?x53 (+ (+ (* 11 |v0:9|) (* (- 15) |v8:1|)) (* ?x51 |v4:5|))))
(let (($x69 (and (<= ?x53 ?x54) (<= (+ (+ (* 3 |v2:7|) (* ?x60 |v6:3|)) ?x65) ?x67))))
(let (($x39 (<= (+ (+ (* ?x27 |v0:9|) (* ?x30 |v1:8|)) (* (- 17) |v6:3|)) ?x38)))
(let ((?x22 20))
(let (($x40 (and (<= (+ (+ (* ?x10 |v9:0|) ?x15) (* (- 4) |v1:8|)) ?x22) $x39)))
(let (($x181 (or (or (or $x40 $x69) (or (and (<= ?x80 (- 8)) $x89) $x111)) $x180)))
(and $x181 (and (or $x211 (and (<= ?x218 ?x27) (and $x225 (<= ?x232 ?x95)))) $x295))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
)
)
)
)
)
)
)
)
)
(check-sat)
(exit)

