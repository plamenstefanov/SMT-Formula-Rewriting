(set-info :smt-lib-version 2.6)
(set-logic LRA)
(set-info :source |
   Monniaux, David; Quantifier Elimination by Lazy Model Enumeration, CAV 2010
|)
(set-info :category "random")
; ./Mjollnir_examples/B1/formula_251.m
(set-info :status unsat)
(assert
 (forall ((|v9:0| Real) )(exists ((|v8:1| Real) )(forall ((|v7:2| Real) )(exists ((|v6:3| Real) )(forall ((|v5:4| Real) )(exists ((|v4:5| Real) )(forall ((|v3:6| Real) )(exists ((|v2:7| Real) )(forall ((|v1:8| Real) )(exists ((|v0:9| Real) )(let ((?x198 (- 15)))
(let ((?x297 (+ (+ (* 17 |v7:2|) (* (- 4) |v5:4|)) (* (- 10) |v0:9|))))
(let ((?x292 (+ (+ (* (- 7) |v6:3|) (* 17 |v3:6|)) (* (- 8) |v7:2|))))
(let ((?x284 (+ (+ (* 6 |v2:7|) (* (- 14) |v6:3|)) (* 8 |v2:7|))))
(let ((?x56 9))
(let ((?x278 (+ (+ (* 5 |v5:4|) (* 17 |v7:2|)) (* (- 14) |v0:9|))))
(let (($x300 (or (or (<= ?x278 ?x56) (<= ?x284 1)) (or (<= ?x292 10) (<= ?x297 ?x198)))))
(let ((?x269 (* (- 7) |v6:3|)))
(let (($x272 (<= (+ (+ (* 2 |v6:3|) (* (- 17) |v3:6|)) ?x269) (- 11))))
(let ((?x103 (- 14)))
(let ((?x260 (+ (+ (* (- 2) |v2:7|) (* 4 |v8:1|)) (* (- 13) |v1:8|))))
(let ((?x49 (- 9)))
(let ((?x254 (+ (+ (* (- 12) |v2:7|) (* 19 |v6:3|)) (* ?x198 |v5:4|))))
(let ((?x138 13))
(let ((?x247 (+ (+ (* 16 |v4:5|) (* 18 |v2:7|)) (* ?x198 |v0:9|))))
(let ((?x70 18))
(let ((?x239 (+ (+ (* ?x138 |v3:6|) (* 20 |v4:5|)) (* 6 |v7:2|))))
(let ((?x63 19))
(let (($x233 (<= (+ (+ (* ?x56 |v2:7|) (* ?x138 |v0:9|)) (* (- 5) |v4:5|)) ?x63)))
(let ((?x175 4))
(let ((?x226 (+ (+ (* 20 |v2:7|) (* ?x63 |v5:4|)) (* 10 |v6:3|))))
(let (($x217 (<= (+ (+ (* ?x63 |v6:3|) (* ?x175 |v3:6|)) (* (- 12) |v2:7|)) ?x175)))
(let ((?x210 (+ (+ (* 5 |v8:1|) (* 2 |v1:8|)) (* (- 20) |v1:8|))))
(let ((?x200 (+ (+ (* (- 6) |v5:4|) (* 17 |v9:0|)) (* ?x198 |v9:0|))))
(let ((?x170 (- 5)))
(let ((?x192 (+ (+ (* 7 |v6:3|) (* 17 |v8:1|)) (* 15 |v7:2|))))
(let (($x219 (or (and (<= ?x192 ?x170) (<= ?x200 ?x63)) (or (<= ?x210 (- 1)) $x217))))
(let (($x251 (or $x219 (or (and (<= ?x226 ?x175) $x233) (and (<= ?x239 ?x70) (<= ?x247 ?x138))))))
(let (($x302 (and $x251 (and (and (and (<= ?x254 ?x49) (<= ?x260 ?x103)) $x272) $x300))))
(let (($x183 (<= (+ (+ |v2:7| (* 2 |v3:6|)) (* (- 3) |v4:5|)) ?x49)))
(let (($x178 (<= (+ (+ (* ?x170 |v1:8|) (* 3 |v6:3|)) (* ?x175 |v6:3|)) ?x63)))
(let ((?x165 (+ (+ (* (- 13) |v5:4|) (* (- 16) |v9:0|)) (* (- 4) |v4:5|))))
(let ((?x100 (- 10)))
(let ((?x156 (+ (+ (* 5 |v4:5|) (* (- 2) |v6:3|)) (* 8 |v8:1|))))
(let ((?x34 12))
(let ((?x146 (+ (+ (* 15 |v4:5|) (* (- 13) |v3:6|)) (* 2 |v9:0|))))
(let ((?x137 (+ (+ (* 6 |v0:9|) (* ?x63 |v3:6|)) (* 14 |v7:2|))))
(let ((?x129 (+ (+ (* (- 3) |v6:3|) (* 3 |v4:5|)) (* (- 2) |v7:2|))))
(let ((?x60 (- 12)))
(let ((?x119 (+ (+ (* 20 |v7:2|) (* 11 |v2:7|)) (* ?x49 |v9:0|))))
(let (($x149 (and (or (<= ?x119 ?x60) (<= ?x129 ?x49)) (and (<= ?x137 ?x138) (<= ?x146 ?x34)))))
(let (($x186 (or $x149 (or (and (<= ?x156 ?x100) (<= ?x165 1)) (and $x178 $x183)))))
(let (($x109 (<= (+ (+ (* ?x100 |v8:1|) (* ?x103 |v4:5|)) (* (- 18) |v8:1|)) (- 17))))
(let (($x97 (<= (+ (+ (* 6 |v1:8|) (* ?x60 |v2:7|)) (* ?x60 |v4:5|)) (- 6))))
(let (($x86 (<= (+ (+ (* 5 |v9:0|) |v6:3|) (* 17 |v0:9|)) ?x34)))
(let (($x87 (and (<= (+ (+ |v5:4| (* ?x70 |v7:2|)) (* ?x49 |v5:4|)) (- 16)) $x86)))
(let (($x64 (<= (+ (+ (* (- 18) |v4:5|) (* ?x56 |v4:5|)) (* ?x60 |v5:4|)) ?x63)))
(let (($x50 (<= (+ (+ (* (- 13) |v9:0|) (* 20 |v5:4|)) |v6:3|) ?x49)))
(let ((?x33 (+ (+ (* 14 |v2:7|) (* 15 |v3:6|)) (* 7 |v4:5|))))
(let ((?x20 (+ (+ (* 15 |v8:1|) (* 7 |v8:1|)) (* (- 3) |v1:8|))))
(let (($x112 (and (and (or (<= ?x20 (- 19)) (<= ?x33 ?x34)) (or $x50 $x64)) (and $x87 (or $x97 $x109)))))
(and (or $x112 $x186) $x302)))))))))))))))))))))))))))))))))))))))))))))))))))))
)
)
)
)
)
)
)
)
)
)
(check-sat)
(exit)

