(set-info :smt-lib-version 2.6)
(set-logic LIA)
(set-info
  :source |
 Generated by PSyCO 0.1
 More info in N. P. Lopes and J. Monteiro. Weakest Precondition Synthesis for
 Compiler Optimizations, VMCAI'14.
|)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun W_S1_V6 () Bool)
(declare-fun W_S1_V4 () Bool)
(declare-fun W_S1_V2 () Bool)
(declare-fun W_S1_V3 () Bool)
(declare-fun W_S1_V1 () Bool)
(declare-fun R_E2_V1 () Bool)
(declare-fun R_E2_V3 () Bool)
(declare-fun R_E1_V3 () Bool)
(declare-fun R_E1_V1 () Bool)
(declare-fun R_E1_V6 () Bool)
(declare-fun R_E1_V4 () Bool)
(declare-fun R_E1_V5 () Bool)
(declare-fun R_E1_V2 () Bool)
(declare-fun DISJ_W_S1_R_E1 () Bool)
(declare-fun R_S1_V6 () Bool)
(declare-fun R_S1_V4 () Bool)
(declare-fun R_S1_V5 () Bool)
(declare-fun R_S1_V2 () Bool)
(declare-fun R_S1_V3 () Bool)
(declare-fun R_S1_V1 () Bool)
(declare-fun DISJ_W_S1_R_S1 () Bool)
(declare-fun R_E2_V6 () Bool)
(declare-fun R_E2_V4 () Bool)
(declare-fun R_E2_V5 () Bool)
(declare-fun R_E2_V2 () Bool)
(declare-fun DISJ_W_S1_R_E2 () Bool)
(declare-fun W_S1_V5 () Bool)
(assert
 (let
 (($x59848
   (forall
    ((V1_0 Int) (V3_0 Int) 
     (V2_0 Int) (V5_0 Int) 
     (V4_0 Int) (V6_0 Int) 
     (MW_S1_V1 Bool) (MW_S1_V3 Bool) 
     (MW_S1_V2 Bool) (MW_S1_V5 Bool) 
     (MW_S1_V4 Bool) (MW_S1_V6 Bool) 
     (S1_V1_!5000 Int) (S1_V3_!5001 Int) 
     (S1_V2_!5002 Int) (E1_!4994 Int) 
     (E1_!4997 Int) (E1_!4999 Int) 
     (S1_V5_!5003 Int) (E2_!4995 Int) 
     (E2_!4996 Int) (E2_!4998 Int) 
     (S1_V4_!5004 Int) (S1_V6_!5005 Int))
    (let
    (($x62661
      (and (= E1_!4994 (ite MW_S1_V1 S1_V1_!5000 E1_!4999))
      (= E2_!4996 (+ 1 (ite MW_S1_V3 S1_V3_!5001 E2_!4998)))
      (= V2_0 (ite MW_S1_V2 S1_V2_!5002 V2_0))
      (= V5_0 (ite MW_S1_V5 S1_V5_!5003 V5_0))
      (= V4_0 (ite MW_S1_V4 S1_V4_!5004 V4_0))
      (= V6_0 (ite MW_S1_V6 S1_V6_!5005 V6_0)))))
    (let
    (($x62394
      (and (not (<= V4_0 E2_!4995)) 
      (not (<= V2_0 E1_!4994)) 
      (>= E2_!4996 V4_0) (>= E1_!4994 (+ (- 1) V2_0))
      (not (<= V2_0 E1_!4997)) 
      (not (<= V4_0 E2_!4998)) 
      (not (<= V2_0 E1_!4999))
      (>= (ite MW_S1_V1 S1_V1_!5000 E1_!4999)
      (+ (- 1) (ite MW_S1_V2 S1_V2_!5002 V2_0)))
      (>= (ite MW_S1_V3 S1_V3_!5001 E2_!4998)
      (+ (- 1) (ite MW_S1_V4 S1_V4_!5004 V4_0))))))
    (let
    (($x62319
      (and (or (not R_E2_V1) (= E1_!4994 E1_!4997))
      (or (not R_E2_V3) (= E2_!4995 V3_0)))))
    (let
    (($x60942
      (and (or (not R_E1_V1) (= E1_!4997 V1_0))
      (or (not R_E1_V3) (= E2_!4998 V3_0)))))
    (let
    (($x60285
      (and (= E1_!4994 E1_!4997) 
      (or (not $x60942) (= E1_!4999 E1_!4994))
      (or (not $x60942) (= E1_!4999 E1_!4997))
      (or (not (or (not R_E2_V3) (= E2_!4995 V3_0))) (= E2_!4996 E2_!4995))
      (or (not $x62319) (= E2_!4996 E2_!4998))
      (or (not (or (not R_E2_V1) (= E1_!4997 E1_!4994)))
      (= E2_!4998 E2_!4995)) 
      (or (not MW_S1_V1) W_S1_V1) 
      (or (not MW_S1_V3) W_S1_V3) 
      (or (not MW_S1_V2) W_S1_V2) 
      (or (not MW_S1_V4) W_S1_V4) 
      (or (not MW_S1_V6) W_S1_V6))))
    (or (not $x60285) (not $x62394) $x62661)))))))))
 (let
 (($x69
   (or (and W_S1_V1 R_E1_V1) 
   (and W_S1_V3 R_E1_V3) (and W_S1_V2 R_E1_V2) R_E1_V5 
   (and W_S1_V4 R_E1_V4) (and W_S1_V6 R_E1_V6))))
 (let (($x71 (= DISJ_W_S1_R_E1 (not $x69))))
 (let
 (($x66
   (or (and W_S1_V1 R_S1_V1) 
   (and W_S1_V3 R_S1_V3) (and W_S1_V2 R_S1_V2) R_S1_V5 
   (and W_S1_V4 R_S1_V4) (and W_S1_V6 R_S1_V6))))
 (let (($x68 (= DISJ_W_S1_R_S1 (not $x66))))
 (let
 (($x63
   (or (and W_S1_V1 R_E2_V1) 
   (and W_S1_V3 R_E2_V3) (and W_S1_V2 R_E2_V2) R_E2_V5 
   (and W_S1_V4 R_E2_V4) (and W_S1_V6 R_E2_V6))))
 (let (($x65 (= DISJ_W_S1_R_E2 (not $x63))))
 (let (($x130 (not R_E2_V3)))
 (let (($x62291 (or (and (not R_E1_V1) (not R_E1_V3)) $x130)))
 (and $x62291 W_S1_V5 $x65 $x68 $x71 $x59848)))))))))))
(check-sat)
(exit)

