(set-info :smt-lib-version 2.6)
(set-logic LIA)
(set-info :source "|
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2019 [5,6].
This script might _not_ contain all SMT commands that are used by
Ultimate Automizer. In order to satisfy the restrictions of
the SMT-COMP we have to drop e.g., the commands for getting
values (resp. models), unsatisfiable cores and interpolants.

2019-04-27, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Yu-Fang Chen, Daniel Dietsch, Marius Greitschus,
     Jochen Hoenicke, Yong Li, Alexander Nutz, Betim Musa, Christian
     Schilling, Tanja Schindler, Andreas Podelski: Ultimate Automizer
     and the Search for Perfect Interpolants - (Competition Contribution).
     TACAS (2) 2018: 447-451
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013:36-52
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Automatic Verification of C and Java Programs: SV-COMP 2019.
     TACAS (3) 2019: 133-155
[6] https://sv-comp.sosy-lab.org/2019/
|")
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun c_main_~i~0 () Int)
(assert (exists ((v_main_~c~0_17 Int) (v_main_~c~0_19 Int) (v_main_~c~0_18 Int)) (let ((.cse4 (mod v_main_~c~0_17 256))) (let ((.cse5 (mod v_main_~c~0_18 256)) (.cse3 (mod (+ .cse4 4294967248) 4294967296))) (let ((.cse2 (mod (+ .cse5 (* 10 .cse3) 4294967248) 4294967296)) (.cse1 (mod v_main_~c~0_19 256))) (let ((.cse0 (mod (+ (* 10 .cse2) .cse1 4294967248) 4294967296))) (and (<= .cse0 2147483647) (<= .cse1 57) (<= .cse2 2147483647) (<= .cse3 2147483647) (<= v_main_~c~0_17 127) (<= .cse4 57) (<= 48 .cse1) (<= .cse5 57) (<= 0 (+ v_main_~c~0_17 128)) (<= 48 .cse5) (<= 48 .cse4) (<= .cse0 c_main_~i~0))))))))
(assert (not (and (forall ((v_prenex_4 Int) (v_prenex_3 Int)) (let ((.cse1 (mod v_prenex_4 256))) (let ((.cse2 (mod v_prenex_3 256)) (.cse3 (mod (+ .cse1 (* 10 c_main_~i~0) 4294967248) 4294967296))) (let ((.cse0 (mod (+ .cse2 (* 10 .cse3) 4294967248) 4294967296))) (or (<= .cse0 2147483647) (< .cse1 48) (< 57 .cse2) (<= .cse3 2147483647) (< .cse2 48) (< 57 .cse1) (< 4294967295 .cse0)))))) (forall ((v_prenex_2 Int) (main_~c~0 Int)) (let ((.cse4 (mod main_~c~0 256))) (let ((.cse6 (mod v_prenex_2 256)) (.cse7 (mod (+ .cse4 (* 10 c_main_~i~0) 4294967248) 4294967296))) (let ((.cse5 (mod (+ .cse6 (* 10 .cse7) 4294967248) 4294967296))) (or (< .cse4 48) (<= .cse5 2147483647) (< 57 .cse4) (< 57 .cse6) (< 2147483647 .cse7) (< 4294967295 .cse5) (< .cse6 48)))))))))
(check-sat)
(exit)
