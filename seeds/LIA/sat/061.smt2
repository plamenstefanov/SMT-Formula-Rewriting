(set-info :smt-lib-version 2.6)
(set-logic LIA)
(set-info
  :source |
 Generated by PSyCO 0.1
 More info in N. P. Lopes and J. Monteiro. Weakest Precondition Synthesis for
 Compiler Optimizations, VMCAI'14.
|)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun W_S2_V5 () Bool)
(declare-fun W_S2_V2 () Bool)
(declare-fun W_S2_V3 () Bool)
(declare-fun W_S2_V1 () Bool)
(declare-fun W_S1_V4 () Bool)
(declare-fun W_S1_V5 () Bool)
(declare-fun W_S1_V2 () Bool)
(declare-fun W_S1_V1 () Bool)
(declare-fun R_E1_V1 () Bool)
(declare-fun R_E1_V4 () Bool)
(declare-fun R_E1_V5 () Bool)
(declare-fun R_E1_V2 () Bool)
(declare-fun R_E1_V3 () Bool)
(declare-fun DISJ_W_S2_R_E1 () Bool)
(declare-fun R_S2_V4 () Bool)
(declare-fun R_S2_V5 () Bool)
(declare-fun R_S2_V2 () Bool)
(declare-fun R_S2_V3 () Bool)
(declare-fun R_S2_V1 () Bool)
(declare-fun DISJ_W_S2_R_S2 () Bool)
(declare-fun R_S1_V4 () Bool)
(declare-fun R_S1_V5 () Bool)
(declare-fun R_S1_V2 () Bool)
(declare-fun R_S1_V3 () Bool)
(declare-fun R_S1_V1 () Bool)
(declare-fun DISJ_W_S2_R_S1 () Bool)
(declare-fun DISJ_W_S1_W_S2 () Bool)
(declare-fun DISJ_W_S1_R_E1 () Bool)
(declare-fun DISJ_W_S1_R_S2 () Bool)
(declare-fun DISJ_W_S1_R_S1 () Bool)
(declare-fun W_S2_V4 () Bool)
(declare-fun W_S1_V3 () Bool)
(assert
 (let
 (($x2544
   (forall
    ((V1_0 Int) (V2_0 Int) 
     (MW_S1_V1 Bool) (MW_S1_V2 Bool) 
     (MW_S1_V5 Bool) (MW_S1_V4 Bool) 
     (MW_S2_V1 Bool) (MW_S2_V3 Bool) 
     (MW_S2_V2 Bool) (MW_S2_V5 Bool) 
     (E1_!336 Int) (E1_!337 Int) 
     (E1_!338 Int))
    (let
    (($x2536
      (and (or (not (or (not R_E1_V1) (= V1_0 E1_!336))) (= E1_!336 E1_!337))
      (= E1_!338 E1_!336)
      (or (not (or (not R_E1_V1) (= V1_0 E1_!336))) (= E1_!338 E1_!337))
      (or (not MW_S1_V1) W_S1_V1) 
      (or (not MW_S1_V2) W_S1_V2) 
      (or (not MW_S1_V5) W_S1_V5) 
      (or (not MW_S1_V4) W_S1_V4) 
      (or (not MW_S2_V1) W_S2_V1) 
      (or (not MW_S2_V3) W_S2_V3) 
      (or (not MW_S2_V2) W_S2_V2) 
      (or (not MW_S2_V5) W_S2_V5))))
    (or (not $x2536)
    (not (and (>= E1_!336 V2_0) (>= E1_!337 V2_0) (>= E1_!338 V2_0)))
    (= E1_!337 E1_!338))))))
 (let
 (($x116
   (or (and W_S2_V1 R_E1_V1) 
   (and W_S2_V3 R_E1_V3) (and W_S2_V2 R_E1_V2) 
   (and W_S2_V5 R_E1_V5) R_E1_V4)))
 (let (($x118 (= DISJ_W_S2_R_E1 (not $x116))))
 (let
 (($x113
   (or (and W_S2_V1 R_S2_V1) 
   (and W_S2_V3 R_S2_V3) (and W_S2_V2 R_S2_V2) 
   (and W_S2_V5 R_S2_V5) R_S2_V4)))
 (let (($x115 (= DISJ_W_S2_R_S2 (not $x113))))
 (let
 (($x110
   (or (and W_S2_V1 R_S1_V1) 
   (and W_S2_V3 R_S1_V3) (and W_S2_V2 R_S1_V2) 
   (and W_S2_V5 R_S1_V5) R_S1_V4)))
 (let (($x112 (= DISJ_W_S2_R_S1 (not $x110))))
 (let
 (($x107
   (or (and W_S1_V1 W_S2_V1) W_S2_V3 
   (and W_S1_V2 W_S2_V2) (and W_S1_V5 W_S2_V5) W_S1_V4)))
 (let (($x109 (= DISJ_W_S1_W_S2 (not $x107))))
 (let
 (($x104
   (or (and W_S1_V1 R_E1_V1) R_E1_V3 
   (and W_S1_V2 R_E1_V2) (and W_S1_V5 R_E1_V5) 
   (and W_S1_V4 R_E1_V4))))
 (let (($x106 (= DISJ_W_S1_R_E1 (not $x104))))
 (let
 (($x101
   (or (and W_S1_V1 R_S2_V1) R_S2_V3 
   (and W_S1_V2 R_S2_V2) (and W_S1_V5 R_S2_V5) 
   (and W_S1_V4 R_S2_V4))))
 (let (($x103 (= DISJ_W_S1_R_S2 (not $x101))))
 (let
 (($x98
   (or (and W_S1_V1 R_S1_V1) R_S1_V3 
   (and W_S1_V2 R_S1_V2) (and W_S1_V5 R_S1_V5) 
   (and W_S1_V4 R_S1_V4))))
 (let (($x100 (= DISJ_W_S1_R_S1 (not $x98))))
 (and W_S1_V3 W_S2_V4 $x100 $x103 $x106 $x109 $x112 $x115 $x118 $x2544)))))))))))))))))
(check-sat)
(exit)

