(set-info :smt-lib-version 2.6)
(set-logic LIA)
(set-info
  :source |
 Generated by PSyCO 0.1
 More info in N. P. Lopes and J. Monteiro. Weakest Precondition Synthesis for
 Compiler Optimizations, VMCAI'14.
|)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun W_S1_V6 () Bool)
(declare-fun W_S1_V4 () Bool)
(declare-fun W_S1_V2 () Bool)
(declare-fun W_S1_V3 () Bool)
(declare-fun W_S1_V1 () Bool)
(declare-fun R_E2_V3 () Bool)
(declare-fun R_E2_V1 () Bool)
(declare-fun R_E1_V3 () Bool)
(declare-fun R_E1_V1 () Bool)
(declare-fun R_E1_V6 () Bool)
(declare-fun R_E1_V4 () Bool)
(declare-fun R_E1_V5 () Bool)
(declare-fun R_E1_V2 () Bool)
(declare-fun DISJ_W_S1_R_E1 () Bool)
(declare-fun R_S1_V6 () Bool)
(declare-fun R_S1_V4 () Bool)
(declare-fun R_S1_V5 () Bool)
(declare-fun R_S1_V2 () Bool)
(declare-fun R_S1_V3 () Bool)
(declare-fun R_S1_V1 () Bool)
(declare-fun DISJ_W_S1_R_S1 () Bool)
(declare-fun R_E2_V6 () Bool)
(declare-fun R_E2_V4 () Bool)
(declare-fun R_E2_V5 () Bool)
(declare-fun R_E2_V2 () Bool)
(declare-fun DISJ_W_S1_R_E2 () Bool)
(declare-fun W_S1_V5 () Bool)
(assert
 (let
 (($x62430
   (forall
    ((V1_0 Int) (V3_0 Int) 
     (V2_0 Int) (V4_0 Int) 
     (MW_S1_V1 Bool) (MW_S1_V3 Bool) 
     (MW_S1_V2 Bool) (MW_S1_V4 Bool) 
     (MW_S1_V6 Bool) (E1_!4904 Int) 
     (E1_!4907 Int) (E1_!4909 Int) 
     (E2_!4905 Int) (E2_!4906 Int) 
     (E2_!4908 Int))
    (let
    (($x60277
      (and (not (<= V4_0 E2_!4905)) 
      (not (<= V2_0 E1_!4904)) 
      (>= E2_!4906 V4_0) (>= E1_!4904 (+ (- 1) V2_0))
      (not (<= V2_0 E1_!4907)) 
      (not (<= V4_0 E2_!4908)) 
      (>= E1_!4909 V2_0) (>= E2_!4908 (+ (- 1) V4_0)))))
    (let
    (($x61317
      (and (or (not R_E2_V1) (= E1_!4907 E1_!4904))
      (or (not R_E2_V3) (= V3_0 E2_!4905)))))
    (let
    (($x60239
      (and (or (not R_E1_V1) (= E1_!4907 V1_0))
      (or (not R_E1_V3) (= E2_!4908 V3_0)))))
    (let
    (($x62296
      (and (or (not R_E1_V1) (= V1_0 E1_!4907))
      (or (not R_E1_V3) (= V3_0 E2_!4908)))))
    (let
    (($x60954
      (and (= E1_!4904 E1_!4907) 
      (or (not $x62296) (= E1_!4904 E1_!4909))
      (or (not $x60239) (= E1_!4909 E1_!4907))
      (or (not (or (not R_E2_V3) (= V3_0 E2_!4905))) (= E2_!4905 E2_!4906))
      (or (not (or (not R_E2_V1) (= E1_!4907 E1_!4904)))
      (= E2_!4908 E2_!4905)) 
      (or (not $x61317) (= E2_!4908 E2_!4906)) 
      (or (not MW_S1_V1) W_S1_V1) 
      (or (not MW_S1_V3) W_S1_V3) 
      (or (not MW_S1_V2) W_S1_V2) 
      (or (not MW_S1_V4) W_S1_V4) 
      (or (not MW_S1_V6) W_S1_V6))))
    (or (not $x60954) (not $x60277)
    (and (= E1_!4904 (+ (- 1) E1_!4909)) (= E2_!4906 (+ 1 E2_!4908))))))))))))
 (let
 (($x69
   (or (and W_S1_V1 R_E1_V1) 
   (and W_S1_V3 R_E1_V3) (and W_S1_V2 R_E1_V2) R_E1_V5 
   (and W_S1_V4 R_E1_V4) (and W_S1_V6 R_E1_V6))))
 (let (($x71 (= DISJ_W_S1_R_E1 (not $x69))))
 (let
 (($x66
   (or (and W_S1_V1 R_S1_V1) 
   (and W_S1_V3 R_S1_V3) (and W_S1_V2 R_S1_V2) R_S1_V5 
   (and W_S1_V4 R_S1_V4) (and W_S1_V6 R_S1_V6))))
 (let (($x68 (= DISJ_W_S1_R_S1 (not $x66))))
 (let
 (($x63
   (or (and W_S1_V1 R_E2_V1) 
   (and W_S1_V3 R_E2_V3) (and W_S1_V2 R_E2_V2) R_E2_V5 
   (and W_S1_V4 R_E2_V4) (and W_S1_V6 R_E2_V6))))
 (let (($x65 (= DISJ_W_S1_R_E2 (not $x63))))
 (and W_S1_V5 $x65 $x68 $x71 $x62430)))))))))
(check-sat)
(exit)

