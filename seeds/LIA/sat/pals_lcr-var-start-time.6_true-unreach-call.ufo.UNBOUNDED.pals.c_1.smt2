(set-info :smt-lib-version 2.6)
(set-logic LIA)
(set-info :source "|
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2019 [5,6].
This script might _not_ contain all SMT commands that are used by
Ultimate Automizer. In order to satisfy the restrictions of
the SMT-COMP we have to drop e.g., the commands for getting
values (resp. models), unsatisfiable cores and interpolants.

2019-04-27, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Yu-Fang Chen, Daniel Dietsch, Marius Greitschus,
     Jochen Hoenicke, Yong Li, Alexander Nutz, Betim Musa, Christian
     Schilling, Tanja Schindler, Andreas Podelski: Ultimate Automizer
     and the Search for Perfect Interpolants - (Competition Contribution).
     TACAS (2) 2018: 447-451
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013:36-52
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Automatic Verification of C and Java Programs: SV-COMP 2019.
     TACAS (3) 2019: 133-155
[6] https://sv-comp.sosy-lab.org/2019/
|")
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun |#funAddr~node1.base| () Int)
(declare-fun |#funAddr~node1.offset| () Int)
(declare-fun |#funAddr~node2.base| () Int)
(declare-fun |#funAddr~node2.offset| () Int)
(declare-fun |#funAddr~node3.base| () Int)
(declare-fun |#funAddr~node3.offset| () Int)
(declare-fun |#funAddr~node4.base| () Int)
(declare-fun |#funAddr~node4.offset| () Int)
(declare-fun |#funAddr~node5.base| () Int)
(declare-fun |#funAddr~node5.offset| () Int)
(declare-fun |#funAddr~node6.base| () Int)
(declare-fun |#funAddr~node6.offset| () Int)
(declare-fun c_~alive1~0 () Int)
(declare-fun c_~alive2~0 () Int)
(declare-fun c_~alive3~0 () Int)
(declare-fun c_~alive4~0 () Int)
(declare-fun c_~alive5~0 () Int)
(declare-fun c_~alive6~0 () Int)
(assert (and (= (- 1) |#funAddr~node1.base|) (= 0 |#funAddr~node1.offset|)))
(assert (and (= 1 |#funAddr~node2.offset|) (= (- 1) |#funAddr~node2.base|)))
(assert (and (= |#funAddr~node3.offset| 2) (= (- 1) |#funAddr~node3.base|)))
(assert (and (= (- 1) |#funAddr~node4.base|) (= 3 |#funAddr~node4.offset|)))
(assert (and (= (- 1) |#funAddr~node5.base|) (= |#funAddr~node5.offset| 4)))
(assert (and (= (- 1) |#funAddr~node6.base|) (= 5 |#funAddr~node6.offset|)))
(assert (<= 1 (+ (mod c_~alive5~0 256) (mod c_~alive4~0 256) (mod c_~alive3~0 256) (mod c_~alive6~0 256) (mod c_~alive1~0 256) (mod c_~alive2~0 256))))
(assert (not (and (exists ((~alive3~0 Int) (~alive4~0 Int) (~alive1~0 Int) (~alive2~0 Int) (~alive5~0 Int)) (let ((.cse1 (mod ~alive5~0 256)) (.cse3 (mod ~alive4~0 256)) (.cse2 (mod ~alive1~0 256)) (.cse0 (mod ~alive2~0 256)) (.cse4 (mod ~alive3~0 256))) (and (<= .cse0 0) (<= .cse1 0) (<= .cse2 0) (<= .cse3 0) (<= 1 (+ .cse1 .cse3 .cse4 (mod c_~alive6~0 256) .cse2 .cse0)) (<= .cse4 0)))) (< 0 (mod c_~alive6~0 256)))))
(check-sat)
(exit)
