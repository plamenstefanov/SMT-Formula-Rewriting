(set-info :smt-lib-version 2.6)
(set-logic LIA)
(set-info
  :source |
 Generated by PSyCO 0.1
 More info in N. P. Lopes and J. Monteiro. Weakest Precondition Synthesis for
 Compiler Optimizations, VMCAI'14.
|)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun W_S1_V4 () Bool)
(declare-fun W_S1_V2 () Bool)
(declare-fun W_S1_V3 () Bool)
(declare-fun W_S1_V1 () Bool)
(declare-fun W_S1_V8 () Bool)
(declare-fun R_S1_V3 () Bool)
(declare-fun R_E1_V7 () Bool)
(declare-fun R_E1_V4 () Bool)
(declare-fun R_E1_V2 () Bool)
(declare-fun R_E1_V3 () Bool)
(declare-fun R_E1_V1 () Bool)
(declare-fun R_E1_V8 () Bool)
(declare-fun DISJ_W_S1_R_E1 () Bool)
(declare-fun R_S1_V7 () Bool)
(declare-fun R_S1_V4 () Bool)
(declare-fun R_S1_V2 () Bool)
(declare-fun R_S1_V1 () Bool)
(declare-fun R_S1_V8 () Bool)
(declare-fun DISJ_W_S1_R_S1 () Bool)
(declare-fun W_S1_V7 () Bool)
(assert
 (let
 (($x71117
   (forall
    ((V8_0 Int) (V1_0 Int) 
     (V2_0 Int) (V4_0 Int) 
     (V7_0 Int) (MW_S1_V8 Bool) 
     (MW_S1_V1 Bool) (MW_S1_V3 Bool) 
     (MW_S1_V2 Bool) (MW_S1_V4 Bool) 
     (MW_S1_V7 Bool) (S1_V1_!5808 Int) 
     (S1_V1_!5815 Int) (S1_V3_!5809 Int) 
     (S1_V3_!5816 Int) (S1_V2_!5810 Int) 
     (S1_V2_!5817 Int) (E1_!5806 Int) 
     (E1_!5813 Int) (S1_V8_!5807 Int) 
     (S1_V8_!5814 Int) (S1_V4_!5811 Int) 
     (S1_V4_!5818 Int) (S1_V7_!5812 Int) 
     (S1_V7_!5819 Int))
    (let
    (($x71050
      (and
      (= (ite MW_S1_V8 S1_V8_!5807 V8_0) (ite MW_S1_V8 S1_V8_!5814 V8_0))
      (= (ite MW_S1_V1 S1_V1_!5808 V1_0) (ite MW_S1_V1 S1_V1_!5815 V1_0))
      (= (ite MW_S1_V3 S1_V3_!5809 E1_!5806)
      (+ (- 1) (ite MW_S1_V4 S1_V4_!5818 V4_0)))
      (= (ite MW_S1_V2 S1_V2_!5810 V2_0) (ite MW_S1_V2 S1_V2_!5817 V2_0))
      (= (ite MW_S1_V4 S1_V4_!5811 V4_0) (ite MW_S1_V4 S1_V4_!5818 V4_0))
      (= (ite MW_S1_V7 S1_V7_!5812 V7_0) (ite MW_S1_V7 S1_V7_!5819 V7_0)))))
    (let
    (($x71146
      (and (not (<= V2_0 V1_0)) 
      (not (<= V4_0 E1_!5806))
      (>= (ite MW_S1_V3 S1_V3_!5809 E1_!5806)
      (+ (- 1) (ite MW_S1_V4 S1_V4_!5811 V4_0)))
      (>= (ite MW_S1_V1 S1_V1_!5808 V1_0)
      (+ (- 1) (ite MW_S1_V2 S1_V2_!5810 V2_0))) 
      (not (<= V4_0 E1_!5813))
      (>= E1_!5813 (+ (- 1) (ite MW_S1_V4 S1_V4_!5818 V4_0)))
      (>= (ite MW_S1_V1 S1_V1_!5815 V1_0)
      (+ (- 1) (ite MW_S1_V2 S1_V2_!5817 V2_0))))))
    (let
    (($x70763
      (and
      (or (not (or (not R_S1_V3) (= E1_!5806 E1_!5813)))
      (= S1_V1_!5808 S1_V1_!5815))
      (or (not (or (not R_S1_V3) (= E1_!5806 E1_!5813)))
      (= S1_V3_!5809 S1_V3_!5816))
      (or (not (or (not R_S1_V3) (= E1_!5813 E1_!5806)))
      (= S1_V2_!5817 S1_V2_!5810)) 
      (= E1_!5806 E1_!5813)
      (or (not (or (not R_S1_V3) (= E1_!5806 E1_!5813)))
      (= S1_V8_!5807 S1_V8_!5814))
      (or (not (or (not R_S1_V3) (= E1_!5813 E1_!5806)))
      (= S1_V4_!5818 S1_V4_!5811))
      (or (not (or (not R_S1_V3) (= E1_!5806 E1_!5813)))
      (= S1_V7_!5812 S1_V7_!5819)) 
      (or (not MW_S1_V8) W_S1_V8) 
      (or (not MW_S1_V1) W_S1_V1) 
      (or (not MW_S1_V3) W_S1_V3) 
      (or (not MW_S1_V2) W_S1_V2) 
      (or (not MW_S1_V4) W_S1_V4))))
    (or (not $x70763) (not $x71146) $x71050)))))))
 (let
 (($x50
   (or (and W_S1_V8 R_E1_V8) 
   (and W_S1_V1 R_E1_V1) (and W_S1_V3 R_E1_V3) 
   (and W_S1_V2 R_E1_V2) (and W_S1_V4 R_E1_V4) R_E1_V7)))
 (let (($x52 (= DISJ_W_S1_R_E1 (not $x50))))
 (let
 (($x47
   (or (and W_S1_V8 R_S1_V8) 
   (and W_S1_V1 R_S1_V1) (and W_S1_V3 R_S1_V3) 
   (and W_S1_V2 R_S1_V2) (and W_S1_V4 R_S1_V4) R_S1_V7)))
 (let (($x49 (= DISJ_W_S1_R_S1 (not $x47)))) (and W_S1_V7 $x49 $x52 $x71117)))))))
(check-sat)
(exit)

