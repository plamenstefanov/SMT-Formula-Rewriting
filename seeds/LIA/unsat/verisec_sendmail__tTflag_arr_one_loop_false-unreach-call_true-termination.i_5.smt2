(set-info :smt-lib-version 2.6)
(set-logic LIA)
(set-info :source "|
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2019 [5,6].
This script might _not_ contain all SMT commands that are used by
Ultimate Automizer. In order to satisfy the restrictions of
the SMT-COMP we have to drop e.g., the commands for getting
values (resp. models), unsatisfiable cores and interpolants.

2019-04-27, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Yu-Fang Chen, Daniel Dietsch, Marius Greitschus,
     Jochen Hoenicke, Yong Li, Alexander Nutz, Betim Musa, Christian
     Schilling, Tanja Schindler, Andreas Podelski: Ultimate Automizer
     and the Search for Perfect Interpolants - (Competition Contribution).
     TACAS (2) 2018: 447-451
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013:36-52
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Automatic Verification of C and Java Programs: SV-COMP 2019.
     TACAS (3) 2019: 133-155
[6] https://sv-comp.sosy-lab.org/2019/
|")
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun main_~c~0 () Int)
(declare-fun main_~i~0 () Int)
(assert (let ((.cse0 (mod main_~c~0 256))) (or (< .cse0 48) (forall ((v_prenex_7 Int) (v_prenex_8 Int)) (let ((.cse4 (mod v_prenex_8 256))) (let ((.cse3 (mod (+ .cse4 (* 10 (mod (+ (mod main_~c~0 256) (* 10 main_~i~0) 4294967248) 4294967296)) 4294967248) 4294967296)) (.cse2 (mod v_prenex_7 256))) (let ((.cse1 (mod (+ (* 10 .cse3) .cse2 4294967248) 4294967296))) (or (< 4294967295 .cse1) (< 57 .cse2) (< 2147483647 .cse3) (< 57 .cse4) (<= .cse1 2147483647) (< .cse4 48) (< .cse2 48)))))) (< 57 .cse0) (< 2147483647 (mod (+ .cse0 (* 10 main_~i~0) 4294967248) 4294967296)))))
(assert (let ((.cse0 (mod main_~c~0 256))) (or (< .cse0 48) (< 57 .cse0) (< 2147483647 (mod (+ .cse0 (* 10 main_~i~0) 4294967248) 4294967296)) (forall ((v_prenex_6 Int) (v_prenex_5 Int)) (let ((.cse4 (mod v_prenex_5 256))) (let ((.cse1 (mod (+ (* 10 (mod (+ (mod main_~c~0 256) (* 10 main_~i~0) 4294967248) 4294967296)) .cse4 4294967248) 4294967296)) (.cse2 (mod v_prenex_6 256))) (let ((.cse3 (mod (+ (* 10 .cse1) .cse2 4294967248) 4294967296))) (or (<= .cse1 2147483647) (< 57 .cse2) (< 4294967295 .cse3) (<= .cse3 2147483647) (< .cse4 48) (< .cse2 48) (< 57 .cse4)))))))))
(assert (let ((.cse0 (mod main_~c~0 256))) (or (< .cse0 48) (< 57 .cse0) (forall ((v_prenex_4 Int) (v_prenex_3 Int)) (let ((.cse1 (mod v_prenex_4 256))) (let ((.cse3 (mod (+ (* 10 (mod (+ (mod main_~c~0 256) (* 10 main_~i~0) 4294967248) 4294967296)) .cse1 4294967248) 4294967296)) (.cse4 (mod v_prenex_3 256))) (let ((.cse2 (mod (+ (* 10 .cse3) .cse4 4294967248) 4294967296))) (or (< .cse1 48) (< 4294967295 .cse2) (<= .cse2 2147483647) (<= .cse3 2147483647) (< 57 .cse4) (< .cse4 48) (< 57 .cse1)))))))))
(assert (not (< 57 (mod main_~c~0 256))))
(assert (not (forall ((v_prenex_2 Int) (v_subst_1 Int)) (let ((.cse2 (mod v_subst_1 256))) (let ((.cse3 (mod (+ .cse2 (* 10 (mod (+ (mod main_~c~0 256) (* 10 main_~i~0) 4294967248) 4294967296)) 4294967248) 4294967296)) (.cse1 (mod v_prenex_2 256))) (let ((.cse0 (mod (+ (* 10 .cse3) .cse1 4294967248) 4294967296))) (or (<= .cse0 2147483647) (< 57 .cse1) (< 57 .cse2) (< .cse2 48) (< 2147483647 .cse3) (< 4294967295 .cse0) (< .cse1 48))))))))
(assert (not (< (mod main_~c~0 256) 48)))
(assert (<= (mod (+ (mod main_~c~0 256) (* 10 main_~i~0) 4294967248) 4294967296) 2147483647))
(check-sat)
(exit)
