(set-info :smt-lib-version 2.6)
(set-logic NIA)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun |c_ULTIMATE.start_main_~x~0#1| () Int)
(declare-fun |c_ULTIMATE.start_main_~y~0#1| () Int)
(declare-fun |c_ULTIMATE.start_main_~z~0#1| () Int)
(assert (forall ((|v_ULTIMATE.start_main_#t~nondet4#1_11| Int) (|v_ULTIMATE.start_main_#t~nondet6#1_11| Int) (|v_ULTIMATE.start_main_#t~nondet5#1_11| Int)) (not (= (mod (+ (* |c_ULTIMATE.start_main_~y~0#1| 4294967294) |c_ULTIMATE.start_main_~z~0#1| (* 4194304 |v_ULTIMATE.start_main_#t~nondet6#1_11|) (* 4290772992 |v_ULTIMATE.start_main_#t~nondet5#1_11|) (* |c_ULTIMATE.start_main_~x~0#1| 4) (* 4194304 |v_ULTIMATE.start_main_#t~nondet4#1_11|)) 4294967296) 1048576))))
(assert (not (forall ((|v_ULTIMATE.start_main_#t~nondet4#1_11| Int) (|v_ULTIMATE.start_main_#t~nondet4#1_10| Int) (|v_ULTIMATE.start_main_#t~nondet6#1_10| Int) (|v_ULTIMATE.start_main_#t~nondet6#1_11| Int) (|v_ULTIMATE.start_main_#t~nondet5#1_11| Int) (|v_ULTIMATE.start_main_#t~nondet5#1_10| Int)) (let ((.cse0 (* |c_ULTIMATE.start_main_~y~0#1| 4294967294)) (.cse1 (* 4290772992 |v_ULTIMATE.start_main_#t~nondet5#1_10|)) (.cse2 (* 4194304 |v_ULTIMATE.start_main_#t~nondet4#1_10|)) (.cse3 (* |c_ULTIMATE.start_main_~x~0#1| 4)) (.cse4 (* 4194304 |v_ULTIMATE.start_main_#t~nondet6#1_10|))) (or (not (= (mod (+ .cse0 .cse1 |c_ULTIMATE.start_main_~z~0#1| (* 4194304 |v_ULTIMATE.start_main_#t~nondet6#1_11|) (* 4290772992 |v_ULTIMATE.start_main_#t~nondet5#1_11|) .cse2 .cse3 (* 4194304 |v_ULTIMATE.start_main_#t~nondet4#1_11|) .cse4) 4294967296) 1048576)) (= 1048576 (mod (+ .cse0 .cse1 |c_ULTIMATE.start_main_~z~0#1| .cse2 .cse3 .cse4) 4294967296)))))))
(check-sat)
(exit)
