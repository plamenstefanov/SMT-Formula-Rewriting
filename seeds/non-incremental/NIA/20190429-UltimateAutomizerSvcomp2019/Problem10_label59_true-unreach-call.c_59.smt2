(set-info :smt-lib-version 2.6)
(set-logic NIA)
(set-info :source "|
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2019 [5,6].
This script might _not_ contain all SMT commands that are used by
Ultimate Automizer. In order to satisfy the restrictions of
the SMT-COMP we have to drop e.g., the commands for getting
values (resp. models), unsatisfiable cores and interpolants.

2019-04-27, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Yu-Fang Chen, Daniel Dietsch, Marius Greitschus,
     Jochen Hoenicke, Yong Li, Alexander Nutz, Betim Musa, Christian
     Schilling, Tanja Schindler, Andreas Podelski: Ultimate Automizer
     and the Search for Perfect Interpolants - (Competition Contribution).
     TACAS (2) 2018: 447-451
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013:36-52
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Automatic Verification of C and Java Programs: SV-COMP 2019.
     TACAS (3) 2019: 133-155
[6] https://sv-comp.sosy-lab.org/2019/
|")
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun c_~a1~0 () Int)
(declare-fun c_~a1~0_primed () Int)
(declare-fun c_~a19~0 () Int)
(declare-fun |c_old(~a10~0)| () Int)
(declare-fun c_~a10~0 () Int)
(declare-fun c_~a10~0_primed () Int)
(declare-fun c_~a12~0 () Int)
(declare-fun c_~a4~0 () Int)
(declare-fun |c_calculate_output_#res_primed| () Int)
(declare-fun c_calculate_output_~input () Int)
(assert (and (= |c_calculate_output_#res_primed| (- 1)) (or (and (< 218 c_~a1~0) (= 3 c_~a10~0)) (and (= 4 c_~a10~0) (<= (+ c_~a1~0 13) 0))) (= 9 c_~a19~0) (= 14 c_~a4~0) (= c_calculate_output_~input 3) (= c_~a1~0_primed (+ (let ((.cse0 (div c_~a1~0 5))) (ite (and (not (= 0 (mod c_~a1~0 5))) (< c_~a1~0 0)) (+ .cse0 1) .cse0)) (- 247106))) (= c_~a10~0_primed 4) (= 0 c_~a12~0)))
(assert (<= c_~a10~0 |c_old(~a10~0)|))
(assert (not (let ((.cse0 (<= 3 |c_old(~a10~0)|))) (or (and .cse0 (exists ((v_prenex_6 Int)) (and (<= (+ v_prenex_6 13) 0) (< v_prenex_6 0) (not (= 0 (mod v_prenex_6 5))) (<= (+ (div v_prenex_6 5) 449583) c_~a1~0_primed)))) (and (exists ((v_prenex_5 Int)) (and (<= 0 v_prenex_5) (<= (+ (div v_prenex_5 5) 449582) c_~a1~0_primed) (< 38 v_prenex_5) (<= v_prenex_5 218))) (<= 2 |c_old(~a10~0)|)) (and .cse0 (exists ((v_prenex_4 Int)) (and (<= (+ (div v_prenex_4 5) 449582) c_~a1~0_primed) (= 0 (mod v_prenex_4 5)) (<= (+ v_prenex_4 13) 0))))))))
(check-sat)
(exit)
