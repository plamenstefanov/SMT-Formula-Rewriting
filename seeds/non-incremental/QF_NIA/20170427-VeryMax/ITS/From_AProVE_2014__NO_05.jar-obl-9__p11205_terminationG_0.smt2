(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
Generated by: Cristina Borralleras, Daniel Larraz, Albert Oliveras, Enric Rodriguez-Carbonell, Albert Rubio
Generated on: 2017-04-27
Generator: VeryMax
Application: Termination proving
Target solver: barcelogic
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun Nl3arg21 () Int)
(declare-fun Nl3arg22 () Int)
(declare-fun lam0n0 () Int)
(declare-fun lam0n1 () Int)
(declare-fun Nl3CT1 () Int)
(declare-fun Nl3CT2 () Int)
(declare-fun lam1n0 () Int)
(declare-fun lam1n1 () Int)
(declare-fun lam2n0 () Int)
(declare-fun lam2n1 () Int)
(declare-fun lam3n0 () Int)
(declare-fun lam3n1 () Int)
(declare-fun lam4n0 () Int)
(declare-fun lam4n1 () Int)
(declare-fun arg1 () Int)
(declare-fun undef8 () Int)
(declare-fun lam8n0 () Int)
(declare-fun lam8n1 () Int)
(declare-fun RFN1_CT () Int)
(declare-fun RFN1_arg2 () Int)
(declare-fun lam6n0 () Int)
(declare-fun lam6n1 () Int)
(declare-fun lam7n0 () Int)
(declare-fun lam7n1 () Int)
(declare-fun lam5n0 () Int)
(declare-fun lam5n1 () Int)
(assert ( and ( <= ( - 1 ) Nl3arg21 ) ( <= Nl3arg21 1 ) ( <= ( - 1 ) Nl3arg22 ) ( <= Nl3arg22 1 ) ))
(assert ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( > ( + ( * Nl3CT1 lam0n0 ) ( * Nl3CT2 lam0n1 ) ( - 1 ) ) 0 ) ( = ( + ( * Nl3arg21 lam0n0 ) ( * Nl3arg22 lam0n1 ) ) 0 ) ) ( and ( >= lam1n0 0 ) ( >= lam1n1 0 ) ( > ( + ( * Nl3CT1 lam1n0 ) ( * Nl3CT2 lam1n1 ) ( - 1 ( + Nl3CT1 ( * Nl3arg21 0 ) ) ) ) 0 ) ( = ( + ( * Nl3arg21 lam1n0 ) ( * Nl3arg22 lam1n1 ) ) 0 ) ( = ( - ( + 0 ( * Nl3arg21 1 ) ) ) 0 ) ) ))
(assert ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( > ( + ( * Nl3CT1 lam0n0 ) ( * Nl3CT2 lam0n1 ) ( - 1 ) ) 0 ) ( = ( + ( * Nl3arg21 lam0n0 ) ( * Nl3arg22 lam0n1 ) ) 0 ) ) ( and ( >= lam2n0 0 ) ( >= lam2n1 0 ) ( > ( + ( * Nl3CT1 lam2n0 ) ( * Nl3CT2 lam2n1 ) ( - 1 ( + Nl3CT2 ( * Nl3arg22 0 ) ) ) ) 0 ) ( = ( + ( * Nl3arg21 lam2n0 ) ( * Nl3arg22 lam2n1 ) ) 0 ) ( = ( - ( + 0 ( * Nl3arg22 1 ) ) ) 0 ) ) ))
(assert ( and ( <= ( + 50 ( * ( - 1 ) arg1 ) ) 0 ) ( <= ( + ( - 99 ) arg1 ) 0 ) ( <= ( + ( + Nl3CT1 ( * Nl3arg21 0 ) ) ( * ( + 0 ( * Nl3arg21 1 ) ) undef8 ) ) 0 ) ( <= ( + ( + Nl3CT2 ( * Nl3arg22 0 ) ) ( * ( + 0 ( * Nl3arg22 1 ) ) undef8 ) ) 0 ) ))
(assert ( or ( and ( and ( >= lam8n0 0 ) ( >= lam8n1 0 ) ( > ( + ( * Nl3CT1 lam8n0 ) ( * Nl3CT2 lam8n1 ) ( - 1 ( - ( + RFN1_CT ( * RFN1_arg2 0 ) ) RFN1_CT ) ) ) 0 ) ( = ( + ( * Nl3arg21 lam8n0 ) ( * Nl3arg22 lam8n1 ) ( - ( - RFN1_arg2 ) ) ) 0 ) ( = ( - ( + 0 ( * RFN1_arg2 1 ) ) ) 0 ) ) ( and ( and ( >= lam6n0 0 ) ( >= lam6n1 0 ) ( > ( + ( * Nl3CT1 lam6n0 ) ( * Nl3CT2 lam6n1 ) ( - 1 ( - RFN1_CT ) ) ) 0 ) ( = ( + ( * Nl3arg21 lam6n0 ) ( * Nl3arg22 lam6n1 ) ( - ( - RFN1_arg2 ) ) ) 0 ) ) ( and ( >= lam7n0 0 ) ( >= lam7n1 0 ) ( > ( + ( * Nl3CT1 lam7n0 ) ( * Nl3CT2 lam7n1 ) ( - 1 ( + ( - ( + RFN1_CT ( * RFN1_arg2 0 ) ) RFN1_CT ) 1 ) ) ) 0 ) ( = ( + ( * Nl3arg21 lam7n0 ) ( * Nl3arg22 lam7n1 ) ( - ( - RFN1_arg2 ) ) ) 0 ) ( = ( - ( + 0 ( * RFN1_arg2 1 ) ) ) 0 ) ) ) ) ( and ( >= lam5n0 0 ) ( >= lam5n1 0 ) ( > ( + ( * Nl3CT1 lam5n0 ) ( * Nl3CT2 lam5n1 ) ( - 1 ) ) 0 ) ( = ( + ( * Nl3arg21 lam5n0 ) ( * Nl3arg22 lam5n1 ) ) 0 ) ) ))
(check-sat)
(exit)
