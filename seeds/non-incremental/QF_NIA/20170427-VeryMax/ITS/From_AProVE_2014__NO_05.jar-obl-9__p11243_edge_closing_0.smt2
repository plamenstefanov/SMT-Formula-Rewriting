(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
Generated by: Cristina Borralleras, Daniel Larraz, Albert Oliveras, Enric Rodriguez-Carbonell, Albert Rubio
Generated on: 2017-04-27
Generator: VeryMax
Application: Termination proving
Target solver: barcelogic
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun Nl2arg11 () Int)
(declare-fun Nl2arg21 () Int)
(declare-fun Nl4arg11 () Int)
(declare-fun Nl4arg21 () Int)
(declare-fun Nl2arg12 () Int)
(declare-fun Nl2arg22 () Int)
(declare-fun Nl4arg12 () Int)
(declare-fun Nl4arg22 () Int)
(declare-fun lam0n0 () Int)
(declare-fun lam0n1 () Int)
(declare-fun lam0n2 () Int)
(declare-fun lam0n3 () Int)
(declare-fun lam0n4 () Int)
(declare-fun UndefCntr0_CT () Int)
(declare-fun Nl4CT1 () Int)
(declare-fun Nl4CT2 () Int)
(declare-fun UndefCntr0_arg1 () Int)
(declare-fun UndefCntr0_arg2 () Int)
(declare-fun UndefCntr0_undef14 () Int)
(declare-fun lam1n0 () Int)
(declare-fun lam1n1 () Int)
(declare-fun lam1n2 () Int)
(declare-fun lam1n3 () Int)
(declare-fun lam1n4 () Int)
(declare-fun Nl2CT1 () Int)
(declare-fun lam2n0 () Int)
(declare-fun lam2n1 () Int)
(declare-fun lam2n2 () Int)
(declare-fun lam2n3 () Int)
(declare-fun lam2n4 () Int)
(declare-fun Nl2CT2 () Int)
(declare-fun lam3n0 () Int)
(declare-fun lam3n1 () Int)
(declare-fun lam3n2 () Int)
(declare-fun lam4n0 () Int)
(declare-fun lam4n1 () Int)
(declare-fun lam4n2 () Int)
(declare-fun lam5n0 () Int)
(declare-fun lam5n1 () Int)
(declare-fun lam5n2 () Int)
(declare-fun lam6n0 () Int)
(declare-fun lam6n1 () Int)
(declare-fun lam6n2 () Int)
(declare-fun lam6n3 () Int)
(declare-fun lam6n4 () Int)
(declare-fun UndefCntr2_CT () Int)
(declare-fun UndefCntr2_arg1 () Int)
(declare-fun UndefCntr2_arg2 () Int)
(declare-fun UndefCntr2_undef4 () Int)
(declare-fun lam7n0 () Int)
(declare-fun lam7n1 () Int)
(declare-fun lam7n2 () Int)
(declare-fun lam7n3 () Int)
(declare-fun lam7n4 () Int)
(declare-fun lam8n0 () Int)
(declare-fun lam8n1 () Int)
(declare-fun lam8n2 () Int)
(declare-fun lam8n3 () Int)
(declare-fun lam8n4 () Int)
(declare-fun lam9n0 () Int)
(declare-fun lam9n1 () Int)
(declare-fun lam10n0 () Int)
(declare-fun lam10n1 () Int)
(declare-fun arg1 () Int)
(declare-fun arg2 () Int)
(declare-fun undef2 () Int)
(declare-fun lam11n0 () Int)
(declare-fun lam11n1 () Int)
(declare-fun lam11n2 () Int)
(declare-fun lam11n3 () Int)
(declare-fun FV_arg1_4 () Int)
(declare-fun FV_arg2_4 () Int)
(declare-fun FV_arg2_3 () Int)
(declare-fun FV_arg1_3 () Int)
(assert ( and ( <= ( - 1 ) Nl2arg11 ) ( <= Nl2arg11 1 ) ( <= ( - 1 ) Nl2arg21 ) ( <= Nl2arg21 1 ) ( <= ( - 1 ) Nl4arg11 ) ( <= Nl4arg11 1 ) ( <= ( - 1 ) Nl4arg21 ) ( <= Nl4arg21 1 ) ( <= ( - 1 ) Nl2arg12 ) ( <= Nl2arg12 1 ) ( <= ( - 1 ) Nl2arg22 ) ( <= Nl2arg22 1 ) ( <= ( - 1 ) Nl4arg12 ) ( <= Nl4arg12 1 ) ( <= ( - 1 ) Nl4arg22 ) ( <= Nl4arg22 1 ) ))
(assert ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n2 0 ) ( >= lam0n3 0 ) ( >= lam0n4 0 ) ( > ( + ( * 15 lam0n0 ) ( * ( - 9 ) lam0n1 ) ( * UndefCntr0_CT lam0n2 ) ( * Nl4CT1 lam0n3 ) ( * Nl4CT2 lam0n4 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam0n1 ) ( * UndefCntr0_arg1 lam0n2 ) ( * Nl4arg11 lam0n3 ) ( * Nl4arg12 lam0n4 ) ) 0 ) ( = ( + ( * ( - 1 ) lam0n0 ) ( * UndefCntr0_arg2 lam0n2 ) ( * Nl4arg21 lam0n3 ) ( * Nl4arg22 lam0n4 ) ) 0 ) ( = ( * UndefCntr0_undef14 lam0n2 ) 0 ) ) ( and ( >= lam1n0 0 ) ( >= lam1n1 0 ) ( >= lam1n2 0 ) ( >= lam1n3 0 ) ( >= lam1n4 0 ) ( > ( + ( * 15 lam1n0 ) ( * ( - 9 ) lam1n1 ) ( * UndefCntr0_CT lam1n2 ) ( * Nl4CT1 lam1n3 ) ( * Nl4CT2 lam1n4 ) ( - 1 ( + ( + Nl2CT1 ( * Nl2arg11 1 ) ) ( * Nl2arg21 0 ) ) ) ) 0 ) ( = ( + ( * 1 lam1n1 ) ( * UndefCntr0_arg1 lam1n2 ) ( * Nl4arg11 lam1n3 ) ( * Nl4arg12 lam1n4 ) ( - ( + 0 ( * Nl2arg11 1 ) ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam1n0 ) ( * UndefCntr0_arg2 lam1n2 ) ( * Nl4arg21 lam1n3 ) ( * Nl4arg22 lam1n4 ) ) 0 ) ( = ( + ( * UndefCntr0_undef14 lam1n2 ) ( - ( + 0 ( * Nl2arg21 1 ) ) ) ) 0 ) ) ))
(assert ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n2 0 ) ( >= lam0n3 0 ) ( >= lam0n4 0 ) ( > ( + ( * 15 lam0n0 ) ( * ( - 9 ) lam0n1 ) ( * UndefCntr0_CT lam0n2 ) ( * Nl4CT1 lam0n3 ) ( * Nl4CT2 lam0n4 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam0n1 ) ( * UndefCntr0_arg1 lam0n2 ) ( * Nl4arg11 lam0n3 ) ( * Nl4arg12 lam0n4 ) ) 0 ) ( = ( + ( * ( - 1 ) lam0n0 ) ( * UndefCntr0_arg2 lam0n2 ) ( * Nl4arg21 lam0n3 ) ( * Nl4arg22 lam0n4 ) ) 0 ) ( = ( * UndefCntr0_undef14 lam0n2 ) 0 ) ) ( and ( >= lam2n0 0 ) ( >= lam2n1 0 ) ( >= lam2n2 0 ) ( >= lam2n3 0 ) ( >= lam2n4 0 ) ( > ( + ( * 15 lam2n0 ) ( * ( - 9 ) lam2n1 ) ( * UndefCntr0_CT lam2n2 ) ( * Nl4CT1 lam2n3 ) ( * Nl4CT2 lam2n4 ) ( - 1 ( + ( + Nl2CT2 ( * Nl2arg12 1 ) ) ( * Nl2arg22 0 ) ) ) ) 0 ) ( = ( + ( * 1 lam2n1 ) ( * UndefCntr0_arg1 lam2n2 ) ( * Nl4arg11 lam2n3 ) ( * Nl4arg12 lam2n4 ) ( - ( + 0 ( * Nl2arg12 1 ) ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam2n0 ) ( * UndefCntr0_arg2 lam2n2 ) ( * Nl4arg21 lam2n3 ) ( * Nl4arg22 lam2n4 ) ) 0 ) ( = ( + ( * UndefCntr0_undef14 lam2n2 ) ( - ( + 0 ( * Nl2arg22 1 ) ) ) ) 0 ) ) ))
(assert ( or ( and ( >= lam3n0 0 ) ( >= lam3n1 0 ) ( >= lam3n2 0 ) ( > ( + ( * ( - 9 ) lam3n0 ) ( * Nl2CT1 lam3n1 ) ( * Nl2CT2 lam3n2 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam3n0 ) ( * Nl2arg11 lam3n1 ) ( * Nl2arg12 lam3n2 ) ) 0 ) ( = ( + ( * Nl2arg21 lam3n1 ) ( * Nl2arg22 lam3n2 ) ) 0 ) ) ( and ( >= lam4n0 0 ) ( >= lam4n1 0 ) ( >= lam4n2 0 ) ( > ( + ( * ( - 9 ) lam4n0 ) ( * Nl2CT1 lam4n1 ) ( * Nl2CT2 lam4n2 ) ( - 1 ( + Nl4CT1 ( * Nl4arg21 0 ) ) ) ) 0 ) ( = ( + ( * 1 lam4n0 ) ( * Nl2arg11 lam4n1 ) ( * Nl2arg12 lam4n2 ) ( - ( + 0 Nl4arg11 ) ) ) 0 ) ( = ( + ( * Nl2arg21 lam4n1 ) ( * Nl2arg22 lam4n2 ) ) 0 ) ) ))
(assert ( or ( and ( >= lam3n0 0 ) ( >= lam3n1 0 ) ( >= lam3n2 0 ) ( > ( + ( * ( - 9 ) lam3n0 ) ( * Nl2CT1 lam3n1 ) ( * Nl2CT2 lam3n2 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam3n0 ) ( * Nl2arg11 lam3n1 ) ( * Nl2arg12 lam3n2 ) ) 0 ) ( = ( + ( * Nl2arg21 lam3n1 ) ( * Nl2arg22 lam3n2 ) ) 0 ) ) ( and ( >= lam5n0 0 ) ( >= lam5n1 0 ) ( >= lam5n2 0 ) ( > ( + ( * ( - 9 ) lam5n0 ) ( * Nl2CT1 lam5n1 ) ( * Nl2CT2 lam5n2 ) ( - 1 ( + Nl4CT2 ( * Nl4arg22 0 ) ) ) ) 0 ) ( = ( + ( * 1 lam5n0 ) ( * Nl2arg11 lam5n1 ) ( * Nl2arg12 lam5n2 ) ( - ( + 0 Nl4arg12 ) ) ) 0 ) ( = ( + ( * Nl2arg21 lam5n1 ) ( * Nl2arg22 lam5n2 ) ) 0 ) ) ))
(assert ( or ( and ( >= lam6n0 0 ) ( >= lam6n1 0 ) ( >= lam6n2 0 ) ( >= lam6n3 0 ) ( >= lam6n4 0 ) ( > ( + ( * 10 lam6n0 ) ( * ( - 49 ) lam6n1 ) ( * UndefCntr2_CT lam6n2 ) ( * Nl2CT1 lam6n3 ) ( * Nl2CT2 lam6n4 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam6n0 ) ( * 1 lam6n1 ) ( * UndefCntr2_arg1 lam6n2 ) ( * Nl2arg11 lam6n3 ) ( * Nl2arg12 lam6n4 ) ) 0 ) ( = ( + ( * UndefCntr2_arg2 lam6n2 ) ( * Nl2arg21 lam6n3 ) ( * Nl2arg22 lam6n4 ) ) 0 ) ( = ( * UndefCntr2_undef4 lam6n2 ) 0 ) ) ( and ( >= lam7n0 0 ) ( >= lam7n1 0 ) ( >= lam7n2 0 ) ( >= lam7n3 0 ) ( >= lam7n4 0 ) ( > ( + ( * 10 lam7n0 ) ( * ( - 49 ) lam7n1 ) ( * UndefCntr2_CT lam7n2 ) ( * Nl2CT1 lam7n3 ) ( * Nl2CT2 lam7n4 ) ( - 1 ( + ( + Nl2CT1 ( * Nl2arg11 1 ) ) ( * Nl2arg21 0 ) ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam7n0 ) ( * 1 lam7n1 ) ( * UndefCntr2_arg1 lam7n2 ) ( * Nl2arg11 lam7n3 ) ( * Nl2arg12 lam7n4 ) ( - ( + 0 ( * Nl2arg11 1 ) ) ) ) 0 ) ( = ( + ( * UndefCntr2_arg2 lam7n2 ) ( * Nl2arg21 lam7n3 ) ( * Nl2arg22 lam7n4 ) ) 0 ) ( = ( + ( * UndefCntr2_undef4 lam7n2 ) ( - ( + 0 ( * Nl2arg21 1 ) ) ) ) 0 ) ) ))
(assert ( or ( and ( >= lam6n0 0 ) ( >= lam6n1 0 ) ( >= lam6n2 0 ) ( >= lam6n3 0 ) ( >= lam6n4 0 ) ( > ( + ( * 10 lam6n0 ) ( * ( - 49 ) lam6n1 ) ( * UndefCntr2_CT lam6n2 ) ( * Nl2CT1 lam6n3 ) ( * Nl2CT2 lam6n4 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam6n0 ) ( * 1 lam6n1 ) ( * UndefCntr2_arg1 lam6n2 ) ( * Nl2arg11 lam6n3 ) ( * Nl2arg12 lam6n4 ) ) 0 ) ( = ( + ( * UndefCntr2_arg2 lam6n2 ) ( * Nl2arg21 lam6n3 ) ( * Nl2arg22 lam6n4 ) ) 0 ) ( = ( * UndefCntr2_undef4 lam6n2 ) 0 ) ) ( and ( >= lam8n0 0 ) ( >= lam8n1 0 ) ( >= lam8n2 0 ) ( >= lam8n3 0 ) ( >= lam8n4 0 ) ( > ( + ( * 10 lam8n0 ) ( * ( - 49 ) lam8n1 ) ( * UndefCntr2_CT lam8n2 ) ( * Nl2CT1 lam8n3 ) ( * Nl2CT2 lam8n4 ) ( - 1 ( + ( + Nl2CT2 ( * Nl2arg12 1 ) ) ( * Nl2arg22 0 ) ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam8n0 ) ( * 1 lam8n1 ) ( * UndefCntr2_arg1 lam8n2 ) ( * Nl2arg11 lam8n3 ) ( * Nl2arg12 lam8n4 ) ( - ( + 0 ( * Nl2arg12 1 ) ) ) ) 0 ) ( = ( + ( * UndefCntr2_arg2 lam8n2 ) ( * Nl2arg21 lam8n3 ) ( * Nl2arg22 lam8n4 ) ) 0 ) ( = ( + ( * UndefCntr2_undef4 lam8n2 ) ( - ( + 0 ( * Nl2arg22 1 ) ) ) ) 0 ) ) ))
(assert ( and ( = arg1 0 ) ( = ( + arg2 ( * ( - 1 ) undef2 ) ) 0 ) ( <= ( + Nl2CT1 ( * ( + 0 Nl2arg11 ) arg1 ) ( * ( + 0 Nl2arg21 ) arg2 ) ) 0 ) ( <= ( + Nl2CT2 ( * ( + 0 Nl2arg12 ) arg1 ) ( * ( + 0 Nl2arg22 ) arg2 ) ) 0 ) ( <= ( + ( - 50 ) arg1 ) 0 ) ))
(assert ( or ( not ( = UndefCntr0_arg1 0 ) ) ( not ( = UndefCntr0_arg2 0 ) ) ( not ( = UndefCntr0_undef14 0 ) ) ( = UndefCntr0_CT 0 ) ))
(assert ( or ( and ( = UndefCntr0_arg1 0 ) ( = UndefCntr0_arg2 0 ) ) ( not ( = UndefCntr0_undef14 0 ) ) ))
(assert ( or ( not ( = UndefCntr2_arg1 0 ) ) ( not ( = UndefCntr2_arg2 0 ) ) ( not ( = UndefCntr2_undef4 0 ) ) ( = UndefCntr2_CT 0 ) ))
(assert ( or ( and ( = UndefCntr2_arg1 0 ) ( = UndefCntr2_arg2 0 ) ) ( not ( = UndefCntr2_undef4 0 ) ) ))
(assert ( and ( >= lam11n0 0 ) ( >= lam11n1 0 ) ( >= lam11n2 0 ) ( >= lam11n3 0 ) ( > ( + ( * ( - 9 ) lam11n0 ) ( * ( - 14 ) lam11n1 ) ( * Nl4CT1 lam11n2 ) ( * Nl4CT2 lam11n3 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam11n0 ) ( * Nl4arg11 lam11n2 ) ( * Nl4arg12 lam11n3 ) ) 0 ) ( = ( + ( * 1 lam11n1 ) ( * Nl4arg21 lam11n2 ) ( * Nl4arg22 lam11n3 ) ) 0 ) ))
(assert ( and ( and ( <= ( + Nl2CT1 ( * Nl2arg11 FV_arg1_4 ) ( * Nl2arg21 FV_arg2_4 ) ) 0 ) ( <= ( + Nl2CT2 ( * Nl2arg12 FV_arg1_4 ) ( * Nl2arg22 FV_arg2_4 ) ) 0 ) ) ( or ( <= ( + ( - 9 ) FV_arg1_4 ) 0 ) ( and ( <= ( + 10 ( * ( - 1 ) FV_arg1_4 ) ) 0 ) ( <= ( + ( - 49 ) FV_arg1_4 ) 0 ) ) ( = ( + ( - 50 ) FV_arg1_4 ) 0 ) ) ))
(assert ( and ( and ( <= ( + Nl4CT1 ( * Nl4arg21 FV_arg2_3 ) ( * Nl4arg11 FV_arg1_3 ) ) 0 ) ( <= ( + Nl4CT2 ( * Nl4arg22 FV_arg2_3 ) ( * Nl4arg12 FV_arg1_3 ) ) 0 ) ) ( and ( <= ( + 15 ( * ( - 1 ) FV_arg2_3 ) ) 0 ) ( <= ( + ( - 9 ) FV_arg1_3 ) 0 ) ) ))
(assert ( and ( and ( <= ( + Nl2CT1 ( * Nl2arg11 FV_arg1_4 ) ( * Nl2arg21 FV_arg2_4 ) ) 0 ) ( <= ( + Nl2CT2 ( * Nl2arg12 FV_arg1_4 ) ( * Nl2arg22 FV_arg2_4 ) ) 0 ) ) ( = ( + ( - 50 ) FV_arg1_4 ) 0 ) ))
(check-sat)
(exit)
