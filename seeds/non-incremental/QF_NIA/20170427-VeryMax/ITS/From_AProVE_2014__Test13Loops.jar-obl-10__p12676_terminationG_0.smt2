(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
Generated by: Cristina Borralleras, Daniel Larraz, Albert Oliveras, Enric Rodriguez-Carbonell, Albert Rubio
Generated on: 2017-04-27
Generator: VeryMax
Application: Termination proving
Target solver: barcelogic
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun Nl3arg11 () Int)
(declare-fun Nl3arg21 () Int)
(declare-fun Nl3arg41 () Int)
(declare-fun Nl3arg51 () Int)
(declare-fun Nl3arg61 () Int)
(declare-fun lam0n0 () Int)
(declare-fun lam0n1 () Int)
(declare-fun lam0n2 () Int)
(declare-fun lam0n3 () Int)
(declare-fun Nl3CT1 () Int)
(declare-fun lam1n0 () Int)
(declare-fun lam1n1 () Int)
(declare-fun lam1n2 () Int)
(declare-fun lam1n3 () Int)
(declare-fun lam2n0 () Int)
(declare-fun lam2n1 () Int)
(declare-fun lam2n2 () Int)
(declare-fun lam2n3 () Int)
(declare-fun lam2n4 () Int)
(declare-fun lam2n5 () Int)
(declare-fun arg1 () Int)
(declare-fun arg2 () Int)
(declare-fun undef25 () Int)
(declare-fun arg3 () Int)
(declare-fun arg4 () Int)
(declare-fun undef28 () Int)
(declare-fun undef29 () Int)
(declare-fun undef30 () Int)
(declare-fun lam6n0 () Int)
(declare-fun lam6n1 () Int)
(declare-fun lam6n2 () Int)
(declare-fun lam6n3 () Int)
(declare-fun RFN1_CT () Int)
(declare-fun RFN1_arg1 () Int)
(declare-fun RFN1_arg2 () Int)
(declare-fun RFN1_arg4 () Int)
(declare-fun RFN1_arg5 () Int)
(declare-fun RFN1_arg6 () Int)
(declare-fun lam4n0 () Int)
(declare-fun lam4n1 () Int)
(declare-fun lam4n2 () Int)
(declare-fun lam4n3 () Int)
(declare-fun lam5n0 () Int)
(declare-fun lam5n1 () Int)
(declare-fun lam5n2 () Int)
(declare-fun lam5n3 () Int)
(declare-fun lam3n0 () Int)
(declare-fun lam3n1 () Int)
(declare-fun lam3n2 () Int)
(declare-fun lam3n3 () Int)
(assert ( and ( <= ( - 1 ) Nl3arg11 ) ( <= Nl3arg11 1 ) ( <= ( - 1 ) Nl3arg21 ) ( <= Nl3arg21 1 ) ( <= ( - 1 ) Nl3arg41 ) ( <= Nl3arg41 1 ) ( <= ( - 1 ) Nl3arg51 ) ( <= Nl3arg51 1 ) ( <= ( - 1 ) Nl3arg61 ) ( <= Nl3arg61 1 ) ))
(assert ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n2 0 ) ( >= lam0n3 0 ) ( > ( + ( * 1 lam0n0 ) ( * 1 lam0n1 ) ( * Nl3CT1 lam0n3 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam0n0 ) ( * ( - 1 ) lam0n2 ) ( * Nl3arg11 lam0n3 ) ) 0 ) ( = ( * Nl3arg21 lam0n3 ) 0 ) ( = ( * Nl3arg41 lam0n3 ) 0 ) ( = ( * Nl3arg51 lam0n3 ) 0 ) ( = ( * Nl3arg61 lam0n3 ) 0 ) ( = ( + ( * ( - 1 ) lam0n1 ) ( * 1 lam0n2 ) ) 0 ) ) ( and ( >= lam1n0 0 ) ( >= lam1n1 0 ) ( >= lam1n2 0 ) ( >= lam1n3 0 ) ( > ( + ( * 1 lam1n0 ) ( * 1 lam1n1 ) ( * Nl3CT1 lam1n3 ) ( - 1 ( + ( + ( + ( + ( + Nl3CT1 ( * Nl3arg11 0 ) ) ( * Nl3arg21 1 ) ) ( * Nl3arg41 0 ) ) ( * Nl3arg51 0 ) ) ( * Nl3arg61 0 ) ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam1n0 ) ( * ( - 1 ) lam1n2 ) ( * Nl3arg11 lam1n3 ) ) 0 ) ( = ( + ( * Nl3arg21 lam1n3 ) ( - ( + 0 ( * Nl3arg21 1 ) ) ) ) 0 ) ( = ( * Nl3arg41 lam1n3 ) 0 ) ( = ( * Nl3arg51 lam1n3 ) 0 ) ( = ( * Nl3arg61 lam1n3 ) 0 ) ( = ( + ( * ( - 1 ) lam1n1 ) ( * 1 lam1n2 ) ( - ( + 0 ( * Nl3arg11 1 ) ) ) ) 0 ) ( = ( - ( + 0 ( * Nl3arg41 1 ) ) ) 0 ) ( = ( - ( + 0 ( * Nl3arg51 1 ) ) ) 0 ) ( = ( - ( + 0 ( * Nl3arg61 1 ) ) ) 0 ) ) ))
(assert ( and ( <= ( + 1 ( * ( - 1 ) arg1 ) ) 0 ) ( <= ( + 1 ( * ( - 1 ) arg2 ) undef25 ) 0 ) ( <= ( + 1 ( * ( - 1 ) undef25 ) ) 0 ) ( <= ( + ( * ( - 1 ) arg1 ) undef25 ) 0 ) ( <= ( + ( * ( - 1 ) arg3 ) arg4 ) 0 ) ( <= ( + 2 ( * ( - 1 ) arg2 ) ) 0 ) ( <= ( + ( + ( + ( + ( + ( + Nl3CT1 ( * Nl3arg11 0 ) ) ( * Nl3arg21 1 ) ) ( * Nl3arg41 0 ) ) ( * Nl3arg51 0 ) ) ( * Nl3arg61 0 ) ) ( * ( + 0 ( * Nl3arg11 1 ) ) undef25 ) ( * ( + 0 ( * Nl3arg41 1 ) ) undef28 ) ( * ( + 0 ( * Nl3arg51 1 ) ) undef29 ) ( * ( + 0 ( * Nl3arg61 1 ) ) undef30 ) ) 0 ) ))
(assert ( or ( and ( and ( >= lam6n0 0 ) ( >= lam6n1 0 ) ( >= lam6n2 0 ) ( >= lam6n3 0 ) ( > ( + ( * 1 lam6n0 ) ( * 1 lam6n1 ) ( * Nl3CT1 lam6n3 ) ( - 1 ( - ( + ( + ( + ( + ( + RFN1_CT ( * RFN1_arg1 0 ) ) ( * RFN1_arg2 1 ) ) ( * RFN1_arg4 0 ) ) ( * RFN1_arg5 0 ) ) ( * RFN1_arg6 0 ) ) RFN1_CT ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam6n0 ) ( * ( - 1 ) lam6n2 ) ( * Nl3arg11 lam6n3 ) ( - ( - RFN1_arg1 ) ) ) 0 ) ( = ( + ( * Nl3arg21 lam6n3 ) ( - ( - ( + 0 ( * RFN1_arg2 1 ) ) RFN1_arg2 ) ) ) 0 ) ( = ( + ( * Nl3arg41 lam6n3 ) ( - ( - RFN1_arg4 ) ) ) 0 ) ( = ( + ( * Nl3arg51 lam6n3 ) ( - ( - RFN1_arg5 ) ) ) 0 ) ( = ( + ( * Nl3arg61 lam6n3 ) ( - ( - RFN1_arg6 ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam6n1 ) ( * 1 lam6n2 ) ( - ( + 0 ( * RFN1_arg1 1 ) ) ) ) 0 ) ( = ( - ( + 0 ( * RFN1_arg4 1 ) ) ) 0 ) ( = ( - ( + 0 ( * RFN1_arg5 1 ) ) ) 0 ) ( = ( - ( + 0 ( * RFN1_arg6 1 ) ) ) 0 ) ) ( and ( and ( >= lam4n0 0 ) ( >= lam4n1 0 ) ( >= lam4n2 0 ) ( >= lam4n3 0 ) ( > ( + ( * 1 lam4n0 ) ( * 1 lam4n1 ) ( * Nl3CT1 lam4n3 ) ( - 1 ( - RFN1_CT ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam4n0 ) ( * ( - 1 ) lam4n2 ) ( * Nl3arg11 lam4n3 ) ( - ( - RFN1_arg1 ) ) ) 0 ) ( = ( + ( * Nl3arg21 lam4n3 ) ( - ( - RFN1_arg2 ) ) ) 0 ) ( = ( + ( * Nl3arg41 lam4n3 ) ( - ( - RFN1_arg4 ) ) ) 0 ) ( = ( + ( * Nl3arg51 lam4n3 ) ( - ( - RFN1_arg5 ) ) ) 0 ) ( = ( + ( * Nl3arg61 lam4n3 ) ( - ( - RFN1_arg6 ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam4n1 ) ( * 1 lam4n2 ) ) 0 ) ) ( and ( >= lam5n0 0 ) ( >= lam5n1 0 ) ( >= lam5n2 0 ) ( >= lam5n3 0 ) ( > ( + ( * 1 lam5n0 ) ( * 1 lam5n1 ) ( * Nl3CT1 lam5n3 ) ( - 1 ( + ( - ( + ( + ( + ( + ( + RFN1_CT ( * RFN1_arg1 0 ) ) ( * RFN1_arg2 1 ) ) ( * RFN1_arg4 0 ) ) ( * RFN1_arg5 0 ) ) ( * RFN1_arg6 0 ) ) RFN1_CT ) 1 ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam5n0 ) ( * ( - 1 ) lam5n2 ) ( * Nl3arg11 lam5n3 ) ( - ( - RFN1_arg1 ) ) ) 0 ) ( = ( + ( * Nl3arg21 lam5n3 ) ( - ( - ( + 0 ( * RFN1_arg2 1 ) ) RFN1_arg2 ) ) ) 0 ) ( = ( + ( * Nl3arg41 lam5n3 ) ( - ( - RFN1_arg4 ) ) ) 0 ) ( = ( + ( * Nl3arg51 lam5n3 ) ( - ( - RFN1_arg5 ) ) ) 0 ) ( = ( + ( * Nl3arg61 lam5n3 ) ( - ( - RFN1_arg6 ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam5n1 ) ( * 1 lam5n2 ) ( - ( + 0 ( * RFN1_arg1 1 ) ) ) ) 0 ) ( = ( - ( + 0 ( * RFN1_arg4 1 ) ) ) 0 ) ( = ( - ( + 0 ( * RFN1_arg5 1 ) ) ) 0 ) ( = ( - ( + 0 ( * RFN1_arg6 1 ) ) ) 0 ) ) ) ) ( and ( >= lam3n0 0 ) ( >= lam3n1 0 ) ( >= lam3n2 0 ) ( >= lam3n3 0 ) ( > ( + ( * 1 lam3n0 ) ( * 1 lam3n1 ) ( * Nl3CT1 lam3n3 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam3n0 ) ( * ( - 1 ) lam3n2 ) ( * Nl3arg11 lam3n3 ) ) 0 ) ( = ( * Nl3arg21 lam3n3 ) 0 ) ( = ( * Nl3arg41 lam3n3 ) 0 ) ( = ( * Nl3arg51 lam3n3 ) 0 ) ( = ( * Nl3arg61 lam3n3 ) 0 ) ( = ( + ( * ( - 1 ) lam3n1 ) ( * 1 lam3n2 ) ) 0 ) ) ))
(check-sat)
(exit)
