(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
Generated by: Cristina Borralleras, Daniel Larraz, Albert Oliveras, Enric Rodriguez-Carbonell, Albert Rubio
Generated on: 2017-04-27
Generator: VeryMax
Application: Termination proving
Target solver: barcelogic
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun Nl2arg11 () Int)
(declare-fun Nl2arg12 () Int)
(declare-fun Nl2arg13 () Int)
(declare-fun lam0n0 () Int)
(declare-fun lam0n1 () Int)
(declare-fun lam0n2 () Int)
(declare-fun lam0n3 () Int)
(declare-fun lam0n4 () Int)
(declare-fun lam0n5 () Int)
(declare-fun UndefCntr0_CT () Int)
(declare-fun Nl2CT1 () Int)
(declare-fun Nl2CT2 () Int)
(declare-fun Nl2CT3 () Int)
(declare-fun UndefCntr0_arg1 () Int)
(declare-fun UndefCntr0_undef2 () Int)
(declare-fun lam1n0 () Int)
(declare-fun lam1n1 () Int)
(declare-fun lam1n2 () Int)
(declare-fun lam1n3 () Int)
(declare-fun lam1n4 () Int)
(declare-fun lam1n5 () Int)
(declare-fun lam2n0 () Int)
(declare-fun lam2n1 () Int)
(declare-fun lam2n2 () Int)
(declare-fun lam2n3 () Int)
(declare-fun lam2n4 () Int)
(declare-fun lam2n5 () Int)
(declare-fun lam3n0 () Int)
(declare-fun lam3n1 () Int)
(declare-fun lam3n2 () Int)
(declare-fun lam3n3 () Int)
(declare-fun lam3n4 () Int)
(declare-fun lam3n5 () Int)
(declare-fun lam4n0 () Int)
(declare-fun lam4n1 () Int)
(declare-fun lam5n0 () Int)
(declare-fun lam5n1 () Int)
(declare-fun lam6n0 () Int)
(declare-fun lam6n1 () Int)
(declare-fun undef1 () Int)
(declare-fun arg1 () Int)
(declare-fun FV_arg1_1 () Int)
(declare-fun FV_undef2_0 () Int)
(declare-fun FV_arg1_0 () Int)
(declare-fun lam7n0 () Int)
(declare-fun lam7n1 () Int)
(declare-fun lam7n2 () Int)
(declare-fun lam7n3 () Int)
(declare-fun FV_arg1_2 () Int)
(declare-fun FV_undef2_2 () Int)
(assert ( and ( <= ( - 1 ) Nl2arg11 ) ( <= Nl2arg11 1 ) ( <= ( - 1 ) Nl2arg12 ) ( <= Nl2arg12 1 ) ( <= ( - 1 ) Nl2arg13 ) ( <= Nl2arg13 1 ) ))
(assert ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n2 0 ) ( >= lam0n3 0 ) ( >= lam0n4 0 ) ( >= lam0n5 0 ) ( > ( + ( * 1 lam0n0 ) ( * UndefCntr0_CT lam0n2 ) ( * Nl2CT1 lam0n3 ) ( * Nl2CT2 lam0n4 ) ( * Nl2CT3 lam0n5 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam0n0 ) ( * UndefCntr0_arg1 lam0n2 ) ( * Nl2arg11 lam0n3 ) ( * Nl2arg12 lam0n4 ) ( * Nl2arg13 lam0n5 ) ) 0 ) ( = ( + ( * ( - 1 ) lam0n1 ) ( * UndefCntr0_undef2 lam0n2 ) ) 0 ) ) ( and ( >= lam1n0 0 ) ( >= lam1n1 0 ) ( >= lam1n2 0 ) ( >= lam1n3 0 ) ( >= lam1n4 0 ) ( >= lam1n5 0 ) ( > ( + ( * 1 lam1n0 ) ( * UndefCntr0_CT lam1n2 ) ( * Nl2CT1 lam1n3 ) ( * Nl2CT2 lam1n4 ) ( * Nl2CT3 lam1n5 ) ( - 1 ( + Nl2CT1 ( * Nl2arg11 0 ) ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam1n0 ) ( * UndefCntr0_arg1 lam1n2 ) ( * Nl2arg11 lam1n3 ) ( * Nl2arg12 lam1n4 ) ( * Nl2arg13 lam1n5 ) ) 0 ) ( = ( + ( * ( - 1 ) lam1n1 ) ( * UndefCntr0_undef2 lam1n2 ) ( - ( + 0 ( * Nl2arg11 1 ) ) ) ) 0 ) ) ))
(assert ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n2 0 ) ( >= lam0n3 0 ) ( >= lam0n4 0 ) ( >= lam0n5 0 ) ( > ( + ( * 1 lam0n0 ) ( * UndefCntr0_CT lam0n2 ) ( * Nl2CT1 lam0n3 ) ( * Nl2CT2 lam0n4 ) ( * Nl2CT3 lam0n5 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam0n0 ) ( * UndefCntr0_arg1 lam0n2 ) ( * Nl2arg11 lam0n3 ) ( * Nl2arg12 lam0n4 ) ( * Nl2arg13 lam0n5 ) ) 0 ) ( = ( + ( * ( - 1 ) lam0n1 ) ( * UndefCntr0_undef2 lam0n2 ) ) 0 ) ) ( and ( >= lam2n0 0 ) ( >= lam2n1 0 ) ( >= lam2n2 0 ) ( >= lam2n3 0 ) ( >= lam2n4 0 ) ( >= lam2n5 0 ) ( > ( + ( * 1 lam2n0 ) ( * UndefCntr0_CT lam2n2 ) ( * Nl2CT1 lam2n3 ) ( * Nl2CT2 lam2n4 ) ( * Nl2CT3 lam2n5 ) ( - 1 ( + Nl2CT2 ( * Nl2arg12 0 ) ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam2n0 ) ( * UndefCntr0_arg1 lam2n2 ) ( * Nl2arg11 lam2n3 ) ( * Nl2arg12 lam2n4 ) ( * Nl2arg13 lam2n5 ) ) 0 ) ( = ( + ( * ( - 1 ) lam2n1 ) ( * UndefCntr0_undef2 lam2n2 ) ( - ( + 0 ( * Nl2arg12 1 ) ) ) ) 0 ) ) ))
(assert ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n2 0 ) ( >= lam0n3 0 ) ( >= lam0n4 0 ) ( >= lam0n5 0 ) ( > ( + ( * 1 lam0n0 ) ( * UndefCntr0_CT lam0n2 ) ( * Nl2CT1 lam0n3 ) ( * Nl2CT2 lam0n4 ) ( * Nl2CT3 lam0n5 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam0n0 ) ( * UndefCntr0_arg1 lam0n2 ) ( * Nl2arg11 lam0n3 ) ( * Nl2arg12 lam0n4 ) ( * Nl2arg13 lam0n5 ) ) 0 ) ( = ( + ( * ( - 1 ) lam0n1 ) ( * UndefCntr0_undef2 lam0n2 ) ) 0 ) ) ( and ( >= lam3n0 0 ) ( >= lam3n1 0 ) ( >= lam3n2 0 ) ( >= lam3n3 0 ) ( >= lam3n4 0 ) ( >= lam3n5 0 ) ( > ( + ( * 1 lam3n0 ) ( * UndefCntr0_CT lam3n2 ) ( * Nl2CT1 lam3n3 ) ( * Nl2CT2 lam3n4 ) ( * Nl2CT3 lam3n5 ) ( - 1 ( + Nl2CT3 ( * Nl2arg13 0 ) ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam3n0 ) ( * UndefCntr0_arg1 lam3n2 ) ( * Nl2arg11 lam3n3 ) ( * Nl2arg12 lam3n4 ) ( * Nl2arg13 lam3n5 ) ) 0 ) ( = ( + ( * ( - 1 ) lam3n1 ) ( * UndefCntr0_undef2 lam3n2 ) ( - ( + 0 ( * Nl2arg13 1 ) ) ) ) 0 ) ) ))
(assert ( and ( <= ( + Nl2CT1 ( * Nl2arg11 FV_arg1_1 ) ) 0 ) ( <= ( + Nl2CT2 ( * Nl2arg12 FV_arg1_1 ) ) 0 ) ( <= ( + Nl2CT3 ( * Nl2arg13 FV_arg1_1 ) ) 0 ) ))
(assert ( or ( not ( = UndefCntr0_arg1 0 ) ) ( not ( = UndefCntr0_undef2 0 ) ) ( = UndefCntr0_CT 0 ) ))
(assert ( or ( = UndefCntr0_arg1 0 ) ( not ( = UndefCntr0_undef2 0 ) ) ))
(assert ( or ( = UndefCntr0_undef2 0 ) ( and ( = UndefCntr0_arg1 0 ) ( or ( and ( <= ( * ( - 1 ) FV_undef2_0 ) 0 ) ( <= ( + UndefCntr0_CT ( * UndefCntr0_undef2 FV_undef2_0 ) ( * UndefCntr0_arg1 FV_arg1_0 ) ) 0 ) ) ( and ( <= ( * ( - 1 ) FV_undef2_0 ) 0 ) ( <= ( + UndefCntr0_CT ( * UndefCntr0_undef2 FV_undef2_0 ) ( * UndefCntr0_arg1 FV_arg1_0 ) ) 0 ) ) ) ) ))
(assert ( and ( >= lam7n0 0 ) ( >= lam7n1 0 ) ( >= lam7n2 0 ) ( >= lam7n3 0 ) ( > ( + ( * Nl2CT1 lam7n1 ) ( * Nl2CT2 lam7n2 ) ( * Nl2CT3 lam7n3 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam7n0 ) ( * Nl2arg11 lam7n1 ) ( * Nl2arg12 lam7n2 ) ( * Nl2arg13 lam7n3 ) ) 0 ) ))
(assert ( and ( and ( <= ( + Nl2CT1 ( * Nl2arg11 FV_arg1_2 ) ) 0 ) ( <= ( + Nl2CT2 ( * Nl2arg12 FV_arg1_2 ) ) 0 ) ( <= ( + Nl2CT3 ( * Nl2arg13 FV_arg1_2 ) ) 0 ) ) ( and ( <= ( + 1 ( * ( - 1 ) FV_arg1_2 ) ) 0 ) ( <= ( * ( - 1 ) FV_undef2_2 ) 0 ) ) ))
(check-sat)
(exit)
