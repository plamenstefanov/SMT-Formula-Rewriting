(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
Generated by: Cristina Borralleras, Daniel Larraz, Albert Oliveras, Enric Rodriguez-Carbonell, Albert Rubio
Generated on: 2017-04-27
Generator: VeryMax
Application: Termination proving
Target solver: barcelogic
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun Nl3arg11 () Int)
(declare-fun Nl3arg21 () Int)
(declare-fun Nl3arg31 () Int)
(declare-fun Nl3arg12 () Int)
(declare-fun Nl3arg22 () Int)
(declare-fun Nl3arg32 () Int)
(declare-fun lam0n0 () Int)
(declare-fun lam0n1 () Int)
(declare-fun lam0n2 () Int)
(declare-fun lam0n3 () Int)
(declare-fun lam0n4 () Int)
(declare-fun UndefCntr0_CT () Int)
(declare-fun Nl3CT1 () Int)
(declare-fun Nl3CT2 () Int)
(declare-fun UndefCntr0_arg1 () Int)
(declare-fun UndefCntr0_arg2 () Int)
(declare-fun UndefCntr0_arg3 () Int)
(declare-fun UndefCntr0_undef13 () Int)
(declare-fun UndefCntr0_undef14 () Int)
(declare-fun UndefCntr0_undef15 () Int)
(declare-fun lam1n0 () Int)
(declare-fun lam1n1 () Int)
(declare-fun lam1n2 () Int)
(declare-fun lam1n3 () Int)
(declare-fun lam1n4 () Int)
(declare-fun lam2n0 () Int)
(declare-fun lam2n1 () Int)
(declare-fun lam2n2 () Int)
(declare-fun lam2n3 () Int)
(declare-fun lam2n4 () Int)
(declare-fun lam3n0 () Int)
(declare-fun lam3n1 () Int)
(declare-fun lam3n2 () Int)
(declare-fun lam4n0 () Int)
(declare-fun lam4n1 () Int)
(declare-fun lam4n2 () Int)
(declare-fun lam5n0 () Int)
(declare-fun lam5n1 () Int)
(declare-fun lam5n2 () Int)
(declare-fun lam5n3 () Int)
(declare-fun lam6n0 () Int)
(declare-fun lam6n1 () Int)
(declare-fun lam6n2 () Int)
(declare-fun lam6n3 () Int)
(declare-fun arg2 () Int)
(declare-fun undef7 () Int)
(declare-fun arg3 () Int)
(declare-fun undef8 () Int)
(declare-fun undef9 () Int)
(declare-fun undef10 () Int)
(declare-fun undef11 () Int)
(declare-fun undef12 () Int)
(declare-fun FV_arg1_1 () Int)
(declare-fun FV_arg2_1 () Int)
(declare-fun FV_arg3_1 () Int)
(declare-fun FV_undef13_0 () Int)
(declare-fun FV_arg1_0 () Int)
(declare-fun FV_arg2_0 () Int)
(declare-fun FV_arg3_0 () Int)
(declare-fun FV_undef14_0 () Int)
(declare-fun FV_undef15_0 () Int)
(declare-fun lam7n0 () Int)
(declare-fun lam7n1 () Int)
(declare-fun lam7n2 () Int)
(declare-fun FV_arg1_2 () Int)
(declare-fun FV_arg2_2 () Int)
(declare-fun FV_arg3_2 () Int)
(declare-fun FV_undef13_2 () Int)
(assert ( and ( <= ( - 1 ) Nl3arg11 ) ( <= Nl3arg11 1 ) ( <= ( - 1 ) Nl3arg21 ) ( <= Nl3arg21 1 ) ( <= ( - 1 ) Nl3arg31 ) ( <= Nl3arg31 1 ) ( <= ( - 1 ) Nl3arg12 ) ( <= Nl3arg12 1 ) ( <= ( - 1 ) Nl3arg22 ) ( <= Nl3arg22 1 ) ( <= ( - 1 ) Nl3arg32 ) ( <= Nl3arg32 1 ) ))
(assert ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n2 0 ) ( >= lam0n3 0 ) ( >= lam0n4 0 ) ( > ( + ( * 1 lam0n0 ) ( * UndefCntr0_CT lam0n2 ) ( * Nl3CT1 lam0n3 ) ( * Nl3CT2 lam0n4 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam0n0 ) ( * UndefCntr0_arg1 lam0n2 ) ( * Nl3arg11 lam0n3 ) ( * Nl3arg12 lam0n4 ) ) 0 ) ( = ( + ( * UndefCntr0_arg2 lam0n2 ) ( * Nl3arg21 lam0n3 ) ( * Nl3arg22 lam0n4 ) ) 0 ) ( = ( + ( * UndefCntr0_arg3 lam0n2 ) ( * Nl3arg31 lam0n3 ) ( * Nl3arg32 lam0n4 ) ) 0 ) ( = ( + ( * ( - 1 ) lam0n1 ) ( * UndefCntr0_undef13 lam0n2 ) ) 0 ) ( = ( * UndefCntr0_undef14 lam0n2 ) 0 ) ( = ( * UndefCntr0_undef15 lam0n2 ) 0 ) ) ( and ( >= lam1n0 0 ) ( >= lam1n1 0 ) ( >= lam1n2 0 ) ( >= lam1n3 0 ) ( >= lam1n4 0 ) ( > ( + ( * 1 lam1n0 ) ( * UndefCntr0_CT lam1n2 ) ( * Nl3CT1 lam1n3 ) ( * Nl3CT2 lam1n4 ) ( - 1 ( + ( + ( + Nl3CT1 ( * Nl3arg11 0 ) ) ( * Nl3arg21 0 ) ) ( * Nl3arg31 0 ) ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam1n0 ) ( * UndefCntr0_arg1 lam1n2 ) ( * Nl3arg11 lam1n3 ) ( * Nl3arg12 lam1n4 ) ) 0 ) ( = ( + ( * UndefCntr0_arg2 lam1n2 ) ( * Nl3arg21 lam1n3 ) ( * Nl3arg22 lam1n4 ) ) 0 ) ( = ( + ( * UndefCntr0_arg3 lam1n2 ) ( * Nl3arg31 lam1n3 ) ( * Nl3arg32 lam1n4 ) ) 0 ) ( = ( + ( * ( - 1 ) lam1n1 ) ( * UndefCntr0_undef13 lam1n2 ) ( - ( + 0 ( * Nl3arg11 1 ) ) ) ) 0 ) ( = ( + ( * UndefCntr0_undef14 lam1n2 ) ( - ( + 0 ( * Nl3arg21 1 ) ) ) ) 0 ) ( = ( + ( * UndefCntr0_undef15 lam1n2 ) ( - ( + 0 ( * Nl3arg31 1 ) ) ) ) 0 ) ) ))
(assert ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n2 0 ) ( >= lam0n3 0 ) ( >= lam0n4 0 ) ( > ( + ( * 1 lam0n0 ) ( * UndefCntr0_CT lam0n2 ) ( * Nl3CT1 lam0n3 ) ( * Nl3CT2 lam0n4 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam0n0 ) ( * UndefCntr0_arg1 lam0n2 ) ( * Nl3arg11 lam0n3 ) ( * Nl3arg12 lam0n4 ) ) 0 ) ( = ( + ( * UndefCntr0_arg2 lam0n2 ) ( * Nl3arg21 lam0n3 ) ( * Nl3arg22 lam0n4 ) ) 0 ) ( = ( + ( * UndefCntr0_arg3 lam0n2 ) ( * Nl3arg31 lam0n3 ) ( * Nl3arg32 lam0n4 ) ) 0 ) ( = ( + ( * ( - 1 ) lam0n1 ) ( * UndefCntr0_undef13 lam0n2 ) ) 0 ) ( = ( * UndefCntr0_undef14 lam0n2 ) 0 ) ( = ( * UndefCntr0_undef15 lam0n2 ) 0 ) ) ( and ( >= lam2n0 0 ) ( >= lam2n1 0 ) ( >= lam2n2 0 ) ( >= lam2n3 0 ) ( >= lam2n4 0 ) ( > ( + ( * 1 lam2n0 ) ( * UndefCntr0_CT lam2n2 ) ( * Nl3CT1 lam2n3 ) ( * Nl3CT2 lam2n4 ) ( - 1 ( + ( + ( + Nl3CT2 ( * Nl3arg12 0 ) ) ( * Nl3arg22 0 ) ) ( * Nl3arg32 0 ) ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam2n0 ) ( * UndefCntr0_arg1 lam2n2 ) ( * Nl3arg11 lam2n3 ) ( * Nl3arg12 lam2n4 ) ) 0 ) ( = ( + ( * UndefCntr0_arg2 lam2n2 ) ( * Nl3arg21 lam2n3 ) ( * Nl3arg22 lam2n4 ) ) 0 ) ( = ( + ( * UndefCntr0_arg3 lam2n2 ) ( * Nl3arg31 lam2n3 ) ( * Nl3arg32 lam2n4 ) ) 0 ) ( = ( + ( * ( - 1 ) lam2n1 ) ( * UndefCntr0_undef13 lam2n2 ) ( - ( + 0 ( * Nl3arg12 1 ) ) ) ) 0 ) ( = ( + ( * UndefCntr0_undef14 lam2n2 ) ( - ( + 0 ( * Nl3arg22 1 ) ) ) ) 0 ) ( = ( + ( * UndefCntr0_undef15 lam2n2 ) ( - ( + 0 ( * Nl3arg32 1 ) ) ) ) 0 ) ) ))
(assert ( and ( <= ( + Nl3CT1 ( * Nl3arg11 FV_arg1_1 ) ( * Nl3arg21 FV_arg2_1 ) ( * Nl3arg31 FV_arg3_1 ) ) 0 ) ( <= ( + Nl3CT2 ( * Nl3arg12 FV_arg1_1 ) ( * Nl3arg22 FV_arg2_1 ) ( * Nl3arg32 FV_arg3_1 ) ) 0 ) ))
(assert ( or ( not ( = UndefCntr0_arg1 0 ) ) ( not ( = UndefCntr0_arg2 0 ) ) ( not ( = UndefCntr0_arg3 0 ) ) ( not ( = UndefCntr0_undef13 0 ) ) ( not ( = UndefCntr0_undef14 0 ) ) ( not ( = UndefCntr0_undef15 0 ) ) ( = UndefCntr0_CT 0 ) ))
(assert ( or ( and ( = UndefCntr0_arg1 0 ) ( = UndefCntr0_arg2 0 ) ( = UndefCntr0_arg3 0 ) ) ( or ( not ( = UndefCntr0_undef13 0 ) ) ( not ( = UndefCntr0_undef14 0 ) ) ( not ( = UndefCntr0_undef15 0 ) ) ) ))
(assert ( or ( = UndefCntr0_undef13 0 ) ( and ( and ( = UndefCntr0_arg1 0 ) ( = UndefCntr0_arg2 0 ) ( = UndefCntr0_arg3 0 ) ( = UndefCntr0_undef14 0 ) ( = UndefCntr0_undef15 0 ) ) ( or ( and ( <= ( * ( - 1 ) FV_undef13_0 ) 0 ) ( <= ( + UndefCntr0_CT ( * UndefCntr0_undef13 FV_undef13_0 ) ( * UndefCntr0_arg1 FV_arg1_0 ) ( * UndefCntr0_arg2 FV_arg2_0 ) ( * UndefCntr0_arg3 FV_arg3_0 ) ( * UndefCntr0_undef14 FV_undef14_0 ) ( * UndefCntr0_undef15 FV_undef15_0 ) ) 0 ) ) ( and ( <= ( * ( - 1 ) FV_undef13_0 ) 0 ) ( <= ( + UndefCntr0_CT ( * UndefCntr0_undef13 FV_undef13_0 ) ( * UndefCntr0_arg1 FV_arg1_0 ) ( * UndefCntr0_arg2 FV_arg2_0 ) ( * UndefCntr0_arg3 FV_arg3_0 ) ( * UndefCntr0_undef14 FV_undef14_0 ) ( * UndefCntr0_undef15 FV_undef15_0 ) ) 0 ) ) ) ) ))
(assert ( and ( >= lam7n0 0 ) ( >= lam7n1 0 ) ( >= lam7n2 0 ) ( > ( + ( * Nl3CT1 lam7n1 ) ( * Nl3CT2 lam7n2 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam7n0 ) ( * Nl3arg11 lam7n1 ) ( * Nl3arg12 lam7n2 ) ) 0 ) ( = ( + ( * Nl3arg21 lam7n1 ) ( * Nl3arg22 lam7n2 ) ) 0 ) ( = ( + ( * Nl3arg31 lam7n1 ) ( * Nl3arg32 lam7n2 ) ) 0 ) ))
(assert ( and ( and ( <= ( + Nl3CT1 ( * Nl3arg11 FV_arg1_2 ) ( * Nl3arg21 FV_arg2_2 ) ( * Nl3arg31 FV_arg3_2 ) ) 0 ) ( <= ( + Nl3CT2 ( * Nl3arg12 FV_arg1_2 ) ( * Nl3arg22 FV_arg2_2 ) ( * Nl3arg32 FV_arg3_2 ) ) 0 ) ) ( and ( <= ( + 1 ( * ( - 1 ) FV_arg1_2 ) ) 0 ) ( <= ( * ( - 1 ) FV_undef13_2 ) 0 ) ) ))
(check-sat)
(exit)
